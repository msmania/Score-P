## -*- mode: makefile -*-

##
## This file is part of the Score-P software ecosystem (http://www.score-p.org)
##
## Copyright (c) 2013-2014,
## Technische Universitaet Dresden, Germany
##
## Copyright (c) 2018,
## Forschungszentrum Juelich GmbH, Germany
##
## This software may be modified and distributed under the terms of
## a BSD-style license.  See the COPYING file in the package base
## directory for details.
##


## Specify the number of SHMEM processing elements to be used for the
## TESTS. The default can be overridden at make invocation, like 'make
## shmem_num_pes=8 check-shmem'
shmem_num_pes = 4
shmem_timeout_duration = 5m
shmem_timeout_kill_duration = 10m

TESTS_ENVIRONMENT_SHMEM = oshrun -np $(shmem_num_pes) $(shmem_run_args)
TESTS_SHMEM =
XFAIL_TESTS_SHMEM =

## The following targets are copies of the corresponding check-am,
## check and check-TESTS targets provided by automake where the
## variables TESTS, XFAIL_TESTS and TESTs_ENVIRONMENT have been
## replaced with SERIAL/OMP/MPI/HYBRID versions.

if HAVE_SHMEM_SUPPORT
check-run-shmem: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-shmem-am
check-file-shmem:
	rm -f check-file-shmem
	echo "# Available SHMEM tests:" > check-file-shmem
	for i in $(TESTS_SHMEM); do echo "$$i" >> check-file-shmem; done
else !HAVE_SHMEM_SUPPORT
check-run-shmem:
check-file-shmem:
endif !HAVE_SHMEM_SUPPORT

CLEANFILES += check-file-shmem

check-shmem-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_LTLIBRARIES) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-shmem-TESTS

check-shmem-TESTS: $(TESTS_SHMEM)
	@failed=0; all=0; xfail=0; xpass=0; timeout=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list=' $(TESTS_SHMEM) '; \
	$(am__tty_colors); \
	if test -n "$$list"; then \
	  $(AM_TESTS_ENVIRONMENT_SHMEM) \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    `type timeout >/dev/null 2>&1 && echo timeout --kill-after=$(shmem_timeout_kill_duration) $(shmem_timeout_duration)` \
	        $(TESTS_ENVIRONMENT_SHMEM) $${dir}$$tst; \
	    res=$$?; \
	    if test $$res -eq 0; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS_SHMEM) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		col=$$red; res=XPASS; \
	      ;; \
	      *) \
		col=$$grn; res=PASS; \
	      ;; \
	      esac; \
	    elif test $$res -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS_SHMEM) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xfail=`expr $$xfail + 1`; \
		col=$$lgn; res=XFAIL; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		col=$$red; \
		if test $$res -eq 124; then \
		  timeout=`expr $$timeout + 1`; \
		  res=TIMEDOUT; \
		else \
		  res=FAIL; \
		fi; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      col=$$blu; res=SKIP; \
	    fi; \
	    echo "$${col}$$res$${std}: $$tst"; \
	  done; \
	  if test "$$all" -eq 1; then \
	    tests="test"; \
	    All=""; \
	  else \
	    tests="tests"; \
	    All="All "; \
	  fi; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="$$All$$all $$tests passed"; \
	    else \
	      if test "$$xfail" -eq 1; then failures=failure; else failures=failures; fi; \
	      banner="$$All$$all $$tests behaved as expected ($$xfail expected $$failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all $$tests failed"; \
	    else \
	      if test "$$xpass" -eq 1; then passes=pass; else passes=passes; fi; \
	      banner="$$failed of $$all $$tests did not behave as expected ($$xpass unexpected $$passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  timedout=""; \
	  if test "$$timeout" -ne 0; then \
	    if test "$$timeout" -eq 1; then \
	      timedout="($$timeout test timed out)"; \
	    else \
	      timedout="($$timeout tests timed out)"; \
	    fi; \
	    test `echo "$$timedout" | wc -c` -le `echo "$$dashes" | wc -c` || \
	      dashes="$$timedout"; \
	  fi; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    if test "$$skip" -eq 1; then \
	      skipped="($$skip test was not run)"; \
	    else \
	      skipped="($$skip tests were not run)"; \
	    fi; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$dashes" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$dashes" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  if test "$$failed" -eq 0; then \
	    col="$$grn"; \
	  else \
	    col="$$red"; \
	  fi; \
	  echo "$${col}$$dashes$${std}"; \
	  echo "$${col}$$banner$${std}"; \
	  test -z "$$timedout" || echo "$${col}$$timedout$${std}"; \
	  test -z "$$skipped" || echo "$${col}$$skipped$${std}"; \
	  test -z "$$report" || echo "$${col}$$report$${std}"; \
	  echo "$${col}$$dashes$${std}"; \
	  test "$$failed" -eq 0; \
	else :; fi
