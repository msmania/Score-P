## -*- mode: makefile -*-

##
## This file is part of the Score-P software (http://www.score-p.org)
##
## Copyright (c) 2009-2013,
## RWTH Aachen University, Germany
##
## Copyright (c) 2009-2013,
## Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
##
## Copyright (c) 2009-2017, 2019, 2022,
## Technische Universitaet Dresden, Germany
##
## Copyright (c) 2009-2013,
## University of Oregon, Eugene, USA
##
## Copyright (c) 2009-2016,
## Forschungszentrum Juelich GmbH, Germany
##
## Copyright (c) 2009-2014,
## German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
##
## Copyright (c) 2009-2013, 2015,
## Technische Universitaet Muenchen, Germany
##
## This software may be modified and distributed under the terms of
## a BSD-style license.  See the COPYING file in the package base
## directory for details.
##

## file       src/measurement/Makefile.inc.am


include ../src/measurement/Makefile.common.inc.am

noinst_LTLIBRARIES += libscorep_measurement_core.la
libscorep_measurement_core_la_SOURCES =                                 \
    $(SRC_ROOT)src/measurement/SCOREP_RuntimeManagement.c               \
    $(SRC_ROOT)src/measurement/SCOREP_Events.c                          \
    $(SRC_ROOT)src/measurement/scorep_events_common.h                   \
    $(SRC_ROOT)src/measurement/SCOREP_Config.c                          \
    $(SRC_ROOT)src/measurement/SCOREP_Memory.c                          \
    $(SRC_ROOT)src/measurement/SCOREP_Task.c                            \
    $(SRC_ROOT)src/measurement/SCOREP_Topologies.c                      \
    $(SRC_ROOT)src/measurement/include/SCOREP_Subsystem.h               \
    $(SRC_ROOT)src/measurement/include/SCOREP_Config.h                  \
    $(SRC_ROOT)src/measurement/include/SCOREP_DefinitionHandles.h       \
    $(SRC_ROOT)src/measurement/include/SCOREP_Events.h                  \
    $(SRC_ROOT)src/measurement/include/SCOREP_Memory.h                  \
    $(SRC_ROOT)src/measurement/include/SCOREP_RuntimeManagement.h       \
    $(SRC_ROOT)src/measurement/include/SCOREP_InMeasurement.h           \
    $(SRC_ROOT)src/measurement/include/SCOREP_Location.h                \
    $(SRC_ROOT)src/measurement/include/SCOREP_Types.h                   \
    $(SRC_ROOT)src/measurement/include/SCOREP_Filtering.h               \
    $(SRC_ROOT)src/measurement/include/SCOREP_Properties.h              \
    $(SRC_ROOT)src/measurement/include/SCOREP_ErrorCallback.h           \
    $(SRC_ROOT)src/measurement/include/SCOREP_Task.h                    \
    $(SRC_ROOT)src/measurement/include/SCOREP_Paradigms.h               \
    $(SRC_ROOT)src/measurement/include/SCOREP_IoManagement.h            \
    $(SRC_ROOT)src/measurement/include/SCOREP_AcceleratorManagement.h   \
    $(SRC_ROOT)src/measurement/filtering/SCOREP_Filtering_Management.h  \
    $(SRC_ROOT)src/measurement/filtering/SCOREP_Filtering.c             \
    $(SRC_ROOT)src/measurement/scorep_runtime_management.c              \
    $(SRC_ROOT)src/measurement/scorep_subsystem_management.c            \
    $(SRC_ROOT)src/measurement/scorep_subsystem_management.h            \
    $(SRC_ROOT)src/measurement/scorep_type_utils.c                      \
    $(SRC_ROOT)src/measurement/scorep_type_utils.h                      \
    $(SRC_ROOT)src/measurement/scorep_location_management.h             \
    $(SRC_ROOT)src/measurement/scorep_location_management.c             \
    $(SRC_ROOT)src/measurement/scorep_libwrap_management.h              \
    $(SRC_ROOT)src/measurement/scorep_runtime_management.h              \
    $(SRC_ROOT)src/measurement/scorep_status.c                          \
    $(SRC_ROOT)src/measurement/scorep_status.h                          \
    $(SRC_ROOT)src/measurement/scorep_mpp.h                             \
    $(SRC_ROOT)src/measurement/scorep_paradigms_management.c            \
    $(SRC_ROOT)src/measurement/scorep_paradigms_management.h            \
    $(SRC_ROOT)src/measurement/scorep_properties_management.c           \
    $(SRC_ROOT)src/measurement/scorep_properties_management.h           \
    $(SRC_ROOT)src/measurement/scorep_ipc.h                             \
    $(SRC_ROOT)src/measurement/scorep_environment.c                     \
    $(SRC_ROOT)src/measurement/scorep_environment.h                     \
    $(SRC_ROOT)src/measurement/scorep_unify.c                           \
    $(SRC_ROOT)src/measurement/scorep_unify.h                           \
    $(SRC_ROOT)src/measurement/scorep_unify_helpers.c                   \
    $(SRC_ROOT)src/measurement/scorep_unify_helpers.h                   \
    $(SRC_ROOT)src/measurement/scorep_definition_cube4.h                \
    $(SRC_ROOT)src/measurement/scorep_definition_cube4.c                \
    $(SRC_ROOT)src/measurement/scorep_system_tree.h                     \
    $(SRC_ROOT)src/measurement/scorep_system_tree.c                     \
    $(SRC_ROOT)src/measurement/scorep_system_tree_sequence.c            \
    $(SRC_ROOT)src/measurement/scorep_system_tree_sequence.h            \
    $(SRC_ROOT)src/measurement/scorep_clock_synchronization.h           \
    $(SRC_ROOT)src/measurement/scorep_clock_synchronization.c           \
    $(SRC_ROOT)src/measurement/scorep_runtime_management_timings.h      \
    $(SRC_ROOT)src/measurement/scorep_runtime_management_timings.c      \
    $(SRC_ROOT)src/measurement/scorep_error_callback.c                  \
    $(SRC_ROOT)src/measurement/scorep_task_internal.h

libscorep_measurement_core_la_CPPFLAGS = \
    $(common_libscorep_cppflags) \
    -I$(INC_ROOT)src/measurement/profiling/include \
    -I$(INC_DIR_THREAD) \
    -I$(INC_DIR_SUBSTRATES) \
    -I$(INC_DIR_DEFINITIONS) \
    @SCOREP_TIMER_CPPFLAGS@ \
    @CUBEW_CPPFLAGS@

noinst_LTLIBRARIES += libscorep_measurement_libwrap.la
libscorep_measurement_libwrap_la_SOURCES = \
    $(SRC_ROOT)src/measurement/SCOREP_Libwrap.c
libscorep_measurement_libwrap_la_CPPFLAGS = \
    $(common_libscorep_cppflags) \
    -I$(INC_DIR_DEFINITIONS) \
    $(SCOREP_DLFCN_RTLD_NEXT_CPPFLAGS)

if HAVE_COMPILER_CONSTRUCTOR_SUPPORT

object_DATA += scorep_constructor.$(OBJEXT)
scorep_constructor_CPPFLAGS = \
    $(AM_CPPFLAGS) \
    $(UTILS_CPPFLAGS) \
    -I$(PUBLIC_INC_DIR) \
    -I$(INC_ROOT)src/adapters/compiler \
    -I$(INC_ROOT)src/measurement/include \
    -I$(INC_DIR_DEFINITIONS)
scorep_constructor_CFLAGS = \
    $(AM_CFLAGS) \
    $(SCOREP_COMPILER_CONSTRUCTOR_CFLAGS)

scorep_constructor.o: $(SRC_ROOT)src/measurement/scorep_constructor.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(scorep_constructor_CPPFLAGS) $(CPPFLAGS) $(scorep_constructor_CFLAGS) $(CFLAGS) -MT scorep_constructor.o -MD -MP -MF $(DEPDIR)/scorep_constructor.Tpo -c -o scorep_constructor.o `test -f '$(SRC_ROOT)src/measurement/scorep_constructor.c' || echo '$(srcdir)/'`$(SRC_ROOT)src/measurement/scorep_constructor.c
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/scorep_constructor.Tpo $(DEPDIR)/scorep_constructor.Po
@am__fastdepCC_FALSE@	$(AM_V_CC) @AM_BACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$(SRC_ROOT)src/measurement/scorep_constructor.c' @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	object='scorep_constructor.o' @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(scorep_constructor_CPPFLAGS) $(CPPFLAGS) $(scorep_constructor_CFLAGS) $(CFLAGS) -c -o scorep_constructor.o `test -f '$(SRC_ROOT)src/measurement/scorep_constructor.c' || echo '$(srcdir)/'`$(SRC_ROOT)src/measurement/scorep_constructor.c

scorep_constructor.obj: $(SRC_ROOT)src/measurement/scorep_constructor.c
@am__fastdepCC_TRUE@	$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(scorep_constructor_CPPFLAGS) $(CPPFLAGS) $(scorep_constructor_CFLAGS) $(CFLAGS) -MT scorep_constructor.obj -MD -MP -MF $(DEPDIR)/scorep_constructor.Tpo -c -o scorep_constructor.obj `if test -f '$(SRC_ROOT)src/measurement/scorep_constructor.c'; then $(CYGPATH_W) '$(SRC_ROOT)src/measurement/scorep_constructor.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC_ROOT)src/measurement/scorep_constructor.c'; fi`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/scorep_constructor.Tpo $(DEPDIR)/scorep_constructor.Po
@am__fastdepCC_FALSE@	$(AM_V_CC) @AM_BACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$(SRC_ROOT)src/measurement/scorep_constructor.c' @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	object='scorep_constructor.obj' @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(scorep_constructor_CPPFLAGS) $(CPPFLAGS) $(scorep_constructor_CFLAGS) $(CFLAGS) -c -o scorep_constructor.obj `if test -f '$(SRC_ROOT)src/measurement/scorep_constructor.c'; then $(CYGPATH_W) '$(SRC_ROOT)src/measurement/scorep_constructor.c'; else $(CYGPATH_W) '$(srcdir)/$(SRC_ROOT)src/measurement/scorep_constructor.c'; fi`

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scorep_constructor.Po@am__quote@

if BUILD_SHARED_LIBRARIES

lib_LTLIBRARIES += libscorep_constructor.la
libscorep_constructor_la_SOURCES = \
    $(SRC_ROOT)src/measurement/scorep_constructor.c
libscorep_constructor_la_CPPFLAGS = \
    $(AM_CPPFLAGS) \
    $(UTILS_CPPFLAGS) \
    -I$(PUBLIC_INC_DIR) \
    -I$(INC_ROOT)src/adapters/compiler \
    -I$(INC_ROOT)src/measurement/include \
    -I$(INC_ROOT)src/services/include \
    -I$(INC_DIR_DEFINITIONS)
libscorep_constructor_la_CFLAGS = \
    $(AM_CFLAGS) \
    $(SCOREP_COMPILER_CONSTRUCTOR_CFLAGS)
libscorep_constructor_la_LDFLAGS = \
    $(AM_LDFLAGS) \
    -shared

endif BUILD_SHARED_LIBRARIES

endif HAVE_COMPILER_CONSTRUCTOR_SUPPORT

EXTRA_DIST += \
    $(SRC_ROOT)src/measurement/scorep_constructor.c

## paradigm non mpp

lib_LTLIBRARIES += libscorep_mpp_mockup.la
libscorep_mpp_mockup_la_SOURCES = \
    $(SRC_ROOT)src/measurement/paradigm/scorep_mpp_mockup.c \
    $(SRC_ROOT)src/measurement/paradigm/scorep_ipc_mockup.c \
    $(SRC_ROOT)src/measurement/paradigm/scorep_unify_mpp_mockup.c \
    $(SRC_ROOT)src/measurement/paradigm/scorep_system_tree_sequence_on.c \
    $(SRC_ROOT)src/measurement/paradigm/scorep_clock_synchronization_mpp_mockup.c
libscorep_mpp_mockup_la_CPPFLAGS = \
    $(AM_CPPFLAGS) \
    $(UTILS_CPPFLAGS) \
    -I$(INC_ROOT)src/measurement \
    -I$(INC_ROOT)src/measurement/include \
    -I$(PUBLIC_INC_DIR) \
    -I$(INC_DIR_COMMON_HASH) \
    -I$(INC_ROOT)src/services/include \
    -I$(INC_DIR_DEFINITIONS) \
    @SCOREP_TIMER_CPPFLAGS@
libscorep_mpp_mockup_la_LIBADD = \
    libutils.la
libscorep_mpp_mockup_la_LDFLAGS = \
    $(library_api_version_ldflags)

## paradigm mpp

noinst_LTLIBRARIES += libscorep_mpp_ipc.la
# libscorep_mpp_ipc.la needs a real ipc implementation.
libscorep_mpp_ipc_la_SOURCES = \
    $(SRC_ROOT)src/measurement/paradigm/scorep_mpp_ipc.c \
    $(SRC_ROOT)src/measurement/paradigm/scorep_unify_mpp_ipc.c \
    $(SRC_ROOT)src/measurement/paradigm/scorep_clock_synchronization_mpp_ipc.c
libscorep_mpp_ipc_la_CPPFLAGS = \
    $(AM_CPPFLAGS) \
    -I$(INC_ROOT)src/measurement \
    $(UTILS_CPPFLAGS) \
    -I$(INC_ROOT)src/measurement/include \
    -I$(PUBLIC_INC_DIR) \
    -I$(INC_DIR_COMMON_HASH) \
    -I$(INC_ROOT)src/services/include \
    -I$(INC_DIR_DEFINITIONS) \
    @SCOREP_TIMER_CPPFLAGS@
