#!/bin/bash
##*************************************************************************##
##  CUBE        http://www.scalasca.org/                                   ##
##*************************************************************************##
##  Copyright (c) 2016-2021                                                ##
##  Forschungszentrum Juelich GmbH, Juelich Supercomputing Centre          ##
##                                                                         ##
##  This software may be modified and distributed under the terms of       ##
##  a BSD-style license.  See the COPYING file in the package base         ##
##  directory for details.                                                 ##
##*************************************************************************##


CUBES_DIR="@abs_srcdir@"
TEMPLATE="$CUBES_DIR/template.out"

echo "##########################################################################"
echo "# Run test 33b : Run integration test for Proxy interface"
echo "# (using cube:// protocol)"
echo "#"
echo "##########################################################################"
mkdir -p tests
cd tests

# Choosing a free random port
SERVER_PORT=$((3300+$RANDOM%10000))
PORT_BUSY=`netstat -ap 2>/dev/null | grep $SERVER_PORT`
while test -n "$PORT_BUSY"
do
    echo Randomly picked port $SERVER_PORT is busy :$PORT_BUSY:
    SERVER_PORT=$((3300+$RANDOM%10000))
    PORT_BUSY=`netstat -ap 2>/dev/null | grep $SERVER_PORT`
done

# starting the server
echo Starting server on port: $SERVER_PORT
../cube_server -p $SERVER_PORT 2> test33_cube_server.err > test33_cube_server.log &
SERVER_PID=$!
sleep 1

count=0
while [ -z "`grep 'Waiting for connections' test33_cube_server.err`" ] && [ $count -lt 20 ];
do
    sleep 1
    count=$(( count + 1 ))
done

export CUBE_TEST_URL=cube://localhost:${SERVER_PORT}/${CUBES_DIR}/proxy.cubex

# starting the test executable
../cube_selftest_CubeNetworkProxy 2> test33_CubeNetworkProxy.err | tee -a test33_CubeNetworkProxy.log
returnValueNetwork=$?

# kill the server
kill -TERM ${SERVER_PID}
echo "=====>  done"

cd ..
if [ $returnValueNetwork -ne 0 ];
then
    echo "Test FAILED. Inspect log output for more details."
    exit -1
fi
