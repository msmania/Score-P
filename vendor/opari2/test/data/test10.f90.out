
#line 1 "test10.f90"
! * This file is part of the Score-P software (http://www.score-p.org)
! *
! * Copyright (c) 2009-2011,
! *    RWTH Aachen University, Germany
! *    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
! *    Technische Universitaet Dresden, Germany
! *    University of Oregon, Eugene, USA
! *    Forschungszentrum Juelich GmbH, Germany
! *    German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
! *    Technische Universitaet Muenchen, Germany
! *
! * See the COPYING file in the package base directory for details.
! *
! * Testfile for automated testing of OPARI2
! *
! * @authors Bernd Mohr, Peter Philippen
! *
! * @brief Tests user instrumentation directives.

program test10

      include 'test10.f90.opari.inc'
#line 22 "test10.f90"
integer (kind=omp_lock_kind)      lock

      call POMP2_Init()
#line 25 "test10.f90"

      call POMP2_Off()
#line 27 "test10.f90"

#line 29 "test10.f90"

      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(opari2_region_1,&
      pomp2_if, pomp2_num_threads, pomp2_old_task, &
      opari2_ctc_1 )
#line 30 "test10.f90"
  !$omp parallel &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task) &
  !$omp num_threads(pomp2_num_threads)
      call POMP2_Parallel_begin(opari2_region_1)
#line 31 "test10.f90"
  i = 1
      call POMP2_Parallel_end(opari2_region_1)
  !$omp end parallel
      call POMP2_Parallel_join(opari2_region_1, pomp2_old_task)
#line 33 "test10.f90"

      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(opari2_region_2,&
      pomp2_if, pomp2_num_threads, pomp2_old_task, &
      opari2_ctc_2 )
#line 34 "test10.f90"
  !$omp parallel    &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task) &
  !$omp num_threads(pomp2_num_threads)
      call POMP2_Parallel_begin(opari2_region_2)
  !$omp          do
    do 100, i = 2, 50
     j++
100 continue
#line 38 "test10.f90"
!$omp end do
      call POMP2_Parallel_end(opari2_region_2)
#line 38 "test10.f90"
!$omp end parallel
      call POMP2_Parallel_join(opari2_region_2, pomp2_old_task)
#line 39 "test10.f90"

      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(opari2_region_3,&
      pomp2_if, pomp2_num_threads, pomp2_old_task, &
      opari2_ctc_3 )
#line 40 "test10.f90"
  !$omp parallel    &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task) &
  !$omp num_threads(pomp2_num_threads)
      call POMP2_Parallel_begin(opari2_region_3)
  !$omp          do
    do  i = 3, 50
     j++
    enddo

#line 44 "test10.f90"
!$omp end do
      call POMP2_Parallel_end(opari2_region_3)
#line 44 "test10.f90"
!$omp end parallel
      call POMP2_Parallel_join(opari2_region_3, pomp2_old_task)
#line 45 "test10.f90"
      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(opari2_region_4,&
      pomp2_if, pomp2_num_threads, pomp2_old_task, &
      opari2_ctc_4 )
#line 45 "test10.f90"
  !$omp parallel          &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task) &
  !$omp num_threads(pomp2_num_threads)
      call POMP2_Parallel_begin(opari2_region_4)
  !$omp          sections
  !$omp section
    i = 4
  !$omp section
    i = 5
#line 50 "test10.f90"
!$omp end sections
      call POMP2_Parallel_end(opari2_region_4)
#line 50 "test10.f90"
!$omp end parallel
      call POMP2_Parallel_join(opari2_region_4, pomp2_old_task)
#line 51 "test10.f90"


      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(opari2_region_5,&
      pomp2_if, pomp2_num_threads, pomp2_old_task, &
      opari2_ctc_5 )
#line 53 "test10.f90"
  !$omp parallel           &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task) &
  !$omp num_threads(pomp2_num_threads)
      call POMP2_Parallel_begin(opari2_region_5)
  !$omp          workshare
    i = 6
#line 55 "test10.f90"
!$omp end workshare
      call POMP2_Parallel_end(opari2_region_5)
#line 55 "test10.f90"
!$omp end parallel
      call POMP2_Parallel_join(opari2_region_5, pomp2_old_task)
#line 56 "test10.f90"

  !$omp single
    i = 7
  !$omp end single

  !$omp master
   i = 8
  !$omp end master

  !$omp critical
    i = 9
  !$omp end critical

  !$omp critical test
    i = 10
  !$omp end critical test

  !$omp workshare
    i = 11
  !$omp end workshare

  !$omp workshare
    i = 12
  !$omp end workshare nowait

  !$omp ordered
    i = 13
  !$omp end ordered

  !$omp task
    i = 14
  !$omp end task

  !$omp taskwait

  !$omp atomic update
    i = 15

  !$omp sections
    i = 16
  !$omp section
    i = 17
  !$omp section
    i = 18
  !$omp end sections nowait

  !$omp barrier

  !$omp flush

  !$omp threadprivate( i )

  call omp_init_lock( lock )
  call omp_destroy_lock( lock )

#line 112 "test10.f90"

      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(opari2_region_6,&
      pomp2_if, pomp2_num_threads, pomp2_old_task, &
      opari2_ctc_6 )
#line 113 "test10.f90"
  !$omp parallel &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task) &
  !$omp num_threads(pomp2_num_threads)
      call POMP2_Parallel_begin(opari2_region_6)
#line 114 "test10.f90"
  i = 1
      call POMP2_Implicit_barrier_enter(opari2_region_6,&
      pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(opari2_region_6, pomp2_old_task)
      call POMP2_Parallel_end(opari2_region_6)
#line 115 "test10.f90"
  !$omp end parallel
      call POMP2_Parallel_join(opari2_region_6, pomp2_old_task)
#line 116 "test10.f90"

      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(opari2_region_7,&
      pomp2_if, pomp2_num_threads, pomp2_old_task, &
      opari2_ctc_7 )
#line 117 "test10.f90"
  !$omp parallel    &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task) &
  !$omp num_threads(pomp2_num_threads)
      call POMP2_Parallel_begin(opari2_region_7)
      call POMP2_Do_enter(opari2_region_7, &
     opari2_ctc_7 )
#line 117 "test10.f90"
  !$omp          do
    do 100, i = 2, 50
     j++
100 continue
#line 121 "test10.f90"
!$omp end do nowait
      call POMP2_Implicit_barrier_enter(opari2_region_7,&
      pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(opari2_region_7, pomp2_old_task)
      call POMP2_Do_exit(opari2_region_7)
      call POMP2_Parallel_end(opari2_region_7)
#line 121 "test10.f90"
!$omp end parallel
      call POMP2_Parallel_join(opari2_region_7, pomp2_old_task)
#line 122 "test10.f90"

      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(opari2_region_8,&
      pomp2_if, pomp2_num_threads, pomp2_old_task, &
      opari2_ctc_8 )
#line 123 "test10.f90"
  !$omp parallel    &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task) &
  !$omp num_threads(pomp2_num_threads)
      call POMP2_Parallel_begin(opari2_region_8)
      call POMP2_Do_enter(opari2_region_8, &
     opari2_ctc_8 )
#line 123 "test10.f90"
  !$omp          do
    do  i = 3, 50
     j++
    enddo

#line 127 "test10.f90"
!$omp end do nowait
      call POMP2_Implicit_barrier_enter(opari2_region_8,&
      pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(opari2_region_8, pomp2_old_task)
      call POMP2_Do_exit(opari2_region_8)
      call POMP2_Parallel_end(opari2_region_8)
#line 127 "test10.f90"
!$omp end parallel
      call POMP2_Parallel_join(opari2_region_8, pomp2_old_task)
#line 128 "test10.f90"
      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(opari2_region_9,&
      pomp2_if, pomp2_num_threads, pomp2_old_task, &
      opari2_ctc_9 )
#line 128 "test10.f90"
  !$omp parallel          &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task) &
  !$omp num_threads(pomp2_num_threads)
      call POMP2_Parallel_begin(opari2_region_9)
      call POMP2_Sections_enter(opari2_region_9)
#line 128 "test10.f90"
  !$omp          sections
#line 129 "test10.f90"
  !$omp section
      call POMP2_Section_begin(opari2_region_9, &
     opari2_ctc_9 )
#line 130 "test10.f90"
    i = 4
      call POMP2_Section_end(opari2_region_9)
#line 131 "test10.f90"
  !$omp section
      call POMP2_Section_begin(opari2_region_9, &
     opari2_ctc_9 )
#line 132 "test10.f90"
    i = 5
      call POMP2_Section_end(opari2_region_9)
#line 133 "test10.f90"
!$omp end sections nowait
      call POMP2_Implicit_barrier_enter(opari2_region_9,&
      pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(opari2_region_9, pomp2_old_task)
      call POMP2_Sections_exit(opari2_region_9)
      call POMP2_Parallel_end(opari2_region_9)
#line 133 "test10.f90"
!$omp end parallel
      call POMP2_Parallel_join(opari2_region_9, pomp2_old_task)
#line 134 "test10.f90"


      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(opari2_region_10,&
      pomp2_if, pomp2_num_threads, pomp2_old_task, &
      opari2_ctc_10 )
#line 136 "test10.f90"
  !$omp parallel           &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task) &
  !$omp num_threads(pomp2_num_threads)
      call POMP2_Parallel_begin(opari2_region_10)
      call POMP2_Workshare_enter(opari2_region_10, &
     opari2_ctc_10 )
#line 136 "test10.f90"
  !$omp          workshare
    i = 6
#line 138 "test10.f90"
!$omp end workshare nowait
      call POMP2_Implicit_barrier_enter(opari2_region_10,&
      pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(opari2_region_10, pomp2_old_task)
      call POMP2_Workshare_exit(opari2_region_10)
      call POMP2_Parallel_end(opari2_region_10)
#line 138 "test10.f90"
!$omp end parallel
      call POMP2_Parallel_join(opari2_region_10, pomp2_old_task)
#line 139 "test10.f90"

      call POMP2_Single_enter(opari2_region_11, &
     opari2_ctc_11 )
#line 140 "test10.f90"
  !$omp single
      call POMP2_Single_begin(opari2_region_11)
#line 141 "test10.f90"
    i = 7
      call POMP2_Single_end(opari2_region_11)
#line 142 "test10.f90"
  !$omp end single nowait
      call POMP2_Implicit_barrier_enter(opari2_region_11,&
      pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(opari2_region_11, pomp2_old_task)
      call POMP2_Single_exit(opari2_region_11)
#line 143 "test10.f90"

#line 144 "test10.f90"
  !$omp master
      call POMP2_Master_begin(opari2_region_12, &
     opari2_ctc_12 )
#line 145 "test10.f90"
   i = 8
      call POMP2_Master_end(opari2_region_12)
#line 146 "test10.f90"
  !$omp end master

      call POMP2_Critical_enter(opari2_region_13, &
     opari2_ctc_13 )
#line 148 "test10.f90"
  !$omp critical
      call POMP2_Critical_begin(opari2_region_13)
#line 149 "test10.f90"
    i = 9
      call POMP2_Critical_end(opari2_region_13)
#line 150 "test10.f90"
  !$omp end critical
      call POMP2_Critical_exit(opari2_region_13)
#line 151 "test10.f90"

      call POMP2_Critical_enter(opari2_region_14, &
     opari2_ctc_14 )
#line 152 "test10.f90"
  !$omp critical test
      call POMP2_Critical_begin(opari2_region_14)
#line 153 "test10.f90"
    i = 10
      call POMP2_Critical_end(opari2_region_14)
#line 154 "test10.f90"
  !$omp end critical test
      call POMP2_Critical_exit(opari2_region_14)
#line 155 "test10.f90"

      call POMP2_Workshare_enter(opari2_region_15, &
     opari2_ctc_15 )
#line 156 "test10.f90"
  !$omp workshare
    i = 11
#line 158 "test10.f90"
  !$omp end workshare nowait
      call POMP2_Implicit_barrier_enter(opari2_region_15,&
      pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(opari2_region_15, pomp2_old_task)
      call POMP2_Workshare_exit(opari2_region_15)
#line 159 "test10.f90"

      call POMP2_Workshare_enter(opari2_region_16, &
     opari2_ctc_16 )
#line 160 "test10.f90"
  !$omp workshare
    i = 12
#line 162 "test10.f90"
  !$omp end workshare nowait
      call POMP2_Workshare_exit(opari2_region_16)
#line 163 "test10.f90"

      call POMP2_Ordered_enter(opari2_region_17, &
     opari2_ctc_17 )
#line 164 "test10.f90"
  !$omp ordered
      call POMP2_Ordered_begin(opari2_region_17)
#line 165 "test10.f90"
    i = 13
      call POMP2_Ordered_end(opari2_region_17)
#line 166 "test10.f90"
  !$omp end ordered
      call POMP2_Ordered_exit(opari2_region_17)
#line 167 "test10.f90"

      pomp2_if = .true.
      if (pomp2_if) then
      call POMP2_Task_create_begin(opari2_region_18, pomp2_new_task,&
      pomp2_old_task, pomp2_if, opari2_ctc_18 )
      end if
#line 168 "test10.f90"
  !$omp task if(pomp2_if) firstprivate(pomp2_new_task, pomp2_if)
      if (pomp2_if) then
      call POMP2_Task_begin(opari2_region_18, pomp2_new_task)
      end if
#line 169 "test10.f90"
    i = 14
      if (pomp2_if) then
      call POMP2_Task_end(opari2_region_18)
      end if
#line 170 "test10.f90"
  !$omp end task
      if (pomp2_if) then
      call POMP2_Task_create_end(opari2_region_18, pomp2_old_task)
      end if
#line 171 "test10.f90"

      call POMP2_Taskwait_begin(opari2_region_19,&
      pomp2_old_task, opari2_ctc_19 )
#line 172 "test10.f90"
  !$omp taskwait
      call POMP2_Taskwait_end(opari2_region_19, pomp2_old_task)
#line 173 "test10.f90"

      call POMP2_Atomic_enter(opari2_region_20, &
     opari2_ctc_20 )
#line 174 "test10.f90"
  !$omp atomic update
    i = 15
      call POMP2_Atomic_exit(opari2_region_20)
#line 176 "test10.f90"

      call POMP2_Sections_enter(opari2_region_21, &
     opari2_ctc_21 )
#line 177 "test10.f90"
  !$omp sections
    i = 16
#line 179 "test10.f90"
  !$omp section
      call POMP2_Section_begin(opari2_region_21, &
     opari2_ctc_21 )
#line 180 "test10.f90"
    i = 17
      call POMP2_Section_end(opari2_region_21)
#line 181 "test10.f90"
  !$omp section
      call POMP2_Section_begin(opari2_region_21, &
     opari2_ctc_21 )
#line 182 "test10.f90"
    i = 18
      call POMP2_Section_end(opari2_region_21)
#line 183 "test10.f90"
  !$omp end sections nowait
      call POMP2_Sections_exit(opari2_region_21)
#line 184 "test10.f90"

      call POMP2_Barrier_enter(opari2_region_22,&
      pomp2_old_task, opari2_ctc_22 )
#line 185 "test10.f90"
  !$omp barrier
      call POMP2_Barrier_exit(opari2_region_22, pomp2_old_task)
#line 186 "test10.f90"

      call POMP2_Flush_enter(opari2_region_23, &
     opari2_ctc_23 )
#line 187 "test10.f90"
  !$omp flush
      call POMP2_Flush_exit(opari2_region_23)
#line 188 "test10.f90"

#line 189 "test10.f90"
  !$omp threadprivate( i )

  call POMP2_Init_lock( lock )
  call POMP2_Destroy_lock( lock )


      call POMP2_Finalize()
#line 196 "test10.f90"
end program test10

      subroutine POMP2_Init_reg_000()
         include 'test10.f90.opari.inc'
         call POMP2_Assign_handle( opari2_region_1, &
         opari2_ctc_1 )
         call POMP2_Assign_handle( opari2_region_2, &
         opari2_ctc_2 )
         call POMP2_Assign_handle( opari2_region_3, &
         opari2_ctc_3 )
         call POMP2_Assign_handle( opari2_region_4, &
         opari2_ctc_4 )
         call POMP2_Assign_handle( opari2_region_5, &
         opari2_ctc_5 )
         call POMP2_Assign_handle( opari2_region_6, &
         opari2_ctc_6 )
         call POMP2_Assign_handle( opari2_region_7, &
         opari2_ctc_7 )
         call POMP2_Assign_handle( opari2_region_8, &
         opari2_ctc_8 )
         call POMP2_Assign_handle( opari2_region_9, &
         opari2_ctc_9 )
         call POMP2_Assign_handle( opari2_region_10, &
         opari2_ctc_10 )
         call POMP2_Assign_handle( opari2_region_11, &
         opari2_ctc_11 )
         call POMP2_Assign_handle( opari2_region_12, &
         opari2_ctc_12 )
         call POMP2_Assign_handle( opari2_region_13, &
         opari2_ctc_13 )
         call POMP2_Assign_handle( opari2_region_14, &
         opari2_ctc_14 )
         call POMP2_Assign_handle( opari2_region_15, &
         opari2_ctc_15 )
         call POMP2_Assign_handle( opari2_region_16, &
         opari2_ctc_16 )
         call POMP2_Assign_handle( opari2_region_17, &
         opari2_ctc_17 )
         call POMP2_Assign_handle( opari2_region_18, &
         opari2_ctc_18 )
         call POMP2_Assign_handle( opari2_region_19, &
         opari2_ctc_19 )
         call POMP2_Assign_handle( opari2_region_20, &
         opari2_ctc_20 )
         call POMP2_Assign_handle( opari2_region_21, &
         opari2_ctc_21 )
         call POMP2_Assign_handle( opari2_region_22, &
         opari2_ctc_22 )
         call POMP2_Assign_handle( opari2_region_23, &
         opari2_ctc_23 )
      end
