
#line 1 "test7.f90"
! * This file is part of the Score-P software (http://www.score-p.org)
! *
! * Copyright (c) 2009-2011,
! *    RWTH Aachen University, Germany
! *    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
! *    Technische Universitaet Dresden, Germany
! *    University of Oregon, Eugene, USA
! *    Forschungszentrum Juelich GmbH, Germany
! *    German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
! *    Technische Universitaet Muenchen, Germany
! *
! * See the COPYING file in the package base directory for details.
! *
! * Testfile for automated testing of OPARI2
! *
! *
! * @brief Tests user instrumentation directives.

program test7
      include 'test7.f90.opari.inc'
#line 20 "test7.f90"
      call POMP2_Init()
#line 21 "test7.f90"

      call POMP2_Off()
#line 23 "test7.f90"

      call POMP2_Begin(opari2_region_1, opari2_ctc_1)
#line 25 "test7.f90"

      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(opari2_region_2,&
      pomp2_if, pomp2_num_threads, pomp2_old_task, &
      opari2_ctc_2 )
#line 26 "test7.f90"
  !$omp parallel &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task) &
  !$omp num_threads(pomp2_num_threads)
      call POMP2_Parallel_begin(opari2_region_2)
#line 27 "test7.f90"
  i = 1
      call POMP2_Implicit_barrier_enter(opari2_region_2,&
      pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(opari2_region_2, pomp2_old_task)
      call POMP2_Parallel_end(opari2_region_2)
#line 28 "test7.f90"
  !$omp end parallel
      call POMP2_Parallel_join(opari2_region_2, pomp2_old_task)
#line 29 "test7.f90"

      call POMP2_End(opari2_region_1)
#line 31 "test7.f90"

      call POMP2_On()
#line 33 "test7.f90"

#line 35 "test7.f90"
      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(opari2_region_3,&
      pomp2_if, pomp2_num_threads, pomp2_old_task, &
      opari2_ctc_3 )
#line 35 "test7.f90"
  !$omp parallel &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task) &
  !$omp num_threads(pomp2_num_threads)
      call POMP2_Parallel_begin(opari2_region_3)
#line 36 "test7.f90"
  !$omp do
  do i = 1,2
     write(*,*) i
  end do
  !$omp end do
      call POMP2_Parallel_end(opari2_region_3)
  !$omp end parallel
      call POMP2_Parallel_join(opari2_region_3, pomp2_old_task)
#line 42 "test7.f90"

      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(opari2_region_4,&
      pomp2_if, pomp2_num_threads, pomp2_old_task, &
      opari2_ctc_4 )
#line 43 "test7.f90"
  !$omp parallel    &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task) &
  !$omp num_threads(pomp2_num_threads)
      call POMP2_Parallel_begin(opari2_region_4)
  !$omp          do
  do i = 1,2
     write(*,*) i
  end do
#line 47 "test7.f90"
!$omp end do
      call POMP2_Parallel_end(opari2_region_4)
#line 47 "test7.f90"
!$omp end parallel
      call POMP2_Parallel_join(opari2_region_4, pomp2_old_task)
#line 48 "test7.f90"
#line 49 "test7.f90"

      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(opari2_region_5,&
      pomp2_if, pomp2_num_threads, pomp2_old_task, &
      opari2_ctc_5 )
#line 50 "test7.f90"
  !$omp parallel &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task) &
  !$omp num_threads(pomp2_num_threads)
      call POMP2_Parallel_begin(opari2_region_5)
#line 51 "test7.f90"
  i = 3
      call POMP2_Implicit_barrier_enter(opari2_region_5,&
      pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(opari2_region_5, pomp2_old_task)
      call POMP2_Parallel_end(opari2_region_5)
#line 52 "test7.f90"
  !$omp end parallel
      call POMP2_Parallel_join(opari2_region_5, pomp2_old_task)
#line 53 "test7.f90"

      call POMP2_Finalize()
#line 55 "test7.f90"
end program test7

      subroutine POMP2_Init_reg_000()
         include 'test7.f90.opari.inc'
         call POMP2_Assign_handle( opari2_region_2, &
         opari2_ctc_2 )
         call POMP2_Assign_handle( opari2_region_3, &
         opari2_ctc_3 )
         call POMP2_Assign_handle( opari2_region_4, &
         opari2_ctc_4 )
         call POMP2_Assign_handle( opari2_region_5, &
         opari2_ctc_5 )
      end

      subroutine POMP2_USER_Init_reg_000()
         include 'test7.f90.opari.inc'
         call POMP2_USER_Assign_handle( opari2_region_1, &
         opari2_ctc_1 )
      end
