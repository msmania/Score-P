
#line 1 "test4.f90"
! * This file is part of the Score-P software (http://www.score-p.org)
! *
! * Copyright (c) 2009-2011,
! *    RWTH Aachen University, Germany
! *    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
! *    Technische Universitaet Dresden, Germany
! *    University of Oregon, Eugene, USA
! *    Forschungszentrum Juelich GmbH, Germany
! *    German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
! *    Technische Universitaet Muenchen, Germany
! *
! * See the COPYING file in the package base directory for details.
! *
! * Testfile for automated testing of OPARI2
! *
! *
! * @brief Test the nowait and untied clauses.

program test4
      include 'test4.f90.opari.inc'
#line 20 "test4.f90"
  integer i

  real a(5,5), b(5,5), c(5,5)

      pomp2_num_threads = pomp2_lib_get_max_threads()
      pomp2_if = .true.
      call POMP2_Parallel_fork(opari2_region_1,&
      pomp2_if, pomp2_num_threads, pomp2_old_task, &
      opari2_ctc_1 )
#line 24 "test4.f90"
  !$omp parallel &
  !$omp firstprivate(pomp2_old_task) private(pomp2_new_task) &
  !$omp num_threads(pomp2_num_threads)
      call POMP2_Parallel_begin(opari2_region_1)
#line 25 "test4.f90"
  write(*,*) "parallel"
      call POMP2_Do_enter(opari2_region_2, &
     opari2_ctc_2 )
#line 26 "test4.f90"
  !$omp do
  do i=1,4
     write(*,*) "do nowait",i
  enddo
#line 30 "test4.f90"
  !$omp enddo nowait
      call POMP2_Do_exit(opari2_region_2)
#line 31 "test4.f90"

      call POMP2_Sections_enter(opari2_region_3, &
     opari2_ctc_3 )
#line 32 "test4.f90"
  !$omp sections
#line 33 "test4.f90"
  !$omp section
      call POMP2_Section_begin(opari2_region_3, &
     opari2_ctc_3 )
#line 34 "test4.f90"
  write(*,*) "section nowait 1"
      call POMP2_Section_end(opari2_region_3)
#line 35 "test4.f90"
  !$omp section
      call POMP2_Section_begin(opari2_region_3, &
     opari2_ctc_3 )
#line 36 "test4.f90"
  write(*,*) "section nowait 2"
      call POMP2_Section_end(opari2_region_3)
#line 37 "test4.f90"
  !$omp end sections nowait
      call POMP2_Sections_exit(opari2_region_3)
#line 38 "test4.f90"

      call POMP2_Single_enter(opari2_region_4, &
     opari2_ctc_4 )
#line 39 "test4.f90"
  !$omp single
      call POMP2_Single_begin(opari2_region_4)
#line 40 "test4.f90"
  write(*,*) "single nowait"
      call POMP2_Single_end(opari2_region_4)
#line 41 "test4.f90"
  !$omp end single nowait
      call POMP2_Single_exit(opari2_region_4)
#line 42 "test4.f90"

      call POMP2_Workshare_enter(opari2_region_5, &
     opari2_ctc_5 )
#line 43 "test4.f90"
  !$omp workshare
  a = b + c
#line 45 "test4.f90"
  !$omp end workshare nowait
      call POMP2_Workshare_exit(opari2_region_5)
#line 46 "test4.f90"

      pomp2_if = .true.
      if (pomp2_if) then
      call POMP2_Untied_task_create_begin(opari2_region_6, pomp2_new_task,&
      pomp2_old_task, pomp2_if, opari2_ctc_6 )
      end if
#line 47 "test4.f90"
  !$omp task untied if(pomp2_if) firstprivate(pomp2_new_task, pomp2_if)
      if (pomp2_if) then
      call POMP2_Untied_task_begin(opari2_region_6, pomp2_new_task)
      end if
#line 48 "test4.f90"
  write(*,*) "task"
      if (pomp2_if) then
      call POMP2_Untied_task_end(opari2_region_6)
      end if
#line 49 "test4.f90"
  !$omp end task
      if (pomp2_if) then
      call POMP2_Untied_task_create_end(opari2_region_6, pomp2_old_task)
      end if
#line 50 "test4.f90"

      call POMP2_Implicit_barrier_enter(opari2_region_1,&
      pomp2_old_task)
!$omp barrier
      call POMP2_Implicit_barrier_exit(opari2_region_1, pomp2_old_task)
      call POMP2_Parallel_end(opari2_region_1)
#line 51 "test4.f90"
  !$omp end parallel
      call POMP2_Parallel_join(opari2_region_1, pomp2_old_task)
#line 52 "test4.f90"
end program test4

      subroutine POMP2_Init_reg_000()
         include 'test4.f90.opari.inc'
         call POMP2_Assign_handle( opari2_region_1, &
         opari2_ctc_1 )
         call POMP2_Assign_handle( opari2_region_2, &
         opari2_ctc_2 )
         call POMP2_Assign_handle( opari2_region_3, &
         opari2_ctc_3 )
         call POMP2_Assign_handle( opari2_region_4, &
         opari2_ctc_4 )
         call POMP2_Assign_handle( opari2_region_5, &
         opari2_ctc_5 )
         call POMP2_Assign_handle( opari2_region_6, &
         opari2_ctc_6 )
      end
