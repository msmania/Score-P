#include "test5.c.opari.inc"
#line 1 "test5.c"
/*
 * This file is part of the Score-P software (http://www.score-p.org)
 *
 * Copyright (c) 2009-2011,
 *    RWTH Aachen University, Germany
 *    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
 *    Technische Universitaet Dresden, Germany
 *    University of Oregon, Eugene, USA
 *    Forschungszentrum Juelich GmbH, Germany
 *    German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
 *    Technische Universitaet Muenchen, Germany
 *
 * See the COPYING file in the package base directory for details.
 *
 * Testfile for automated testing of OPARI2
 *
 *
 * @brief Test the splitting of combined parallel clauses.
 */

#include <stdio.h>

int t;
#line 24 "test5.c"
#pragma omp threadprivate(t)

int main() {
  int i, j, k, l;

  l=0;
{
  int pomp2_num_threads = omp_get_max_threads();
  int pomp2_if = 1;
  POMP2_Task_handle pomp2_old_task;
  POMP2_Parallel_fork(&opari2_region_1, pomp2_if, pomp2_num_threads, &pomp2_old_task, opari2_ctc_1 );
#line 30 "test5.c"
  #pragma omp parallel                        \
      private(i,j)                                \
        POMP2_DLIST_00001 firstprivate(pomp2_old_task) num_threads(pomp2_num_threads)
{   POMP2_Parallel_begin( &opari2_region_1 );
{   POMP2_For_enter( &opari2_region_1, opari2_ctc_1  );
#line 30 "test5.c"
  #pragma omp                                 \
      for                                \
      lastprivate(k)                     \
      lastprivate                        \
      (                                  \
        l                                \
      )  schedule(dynamic                     \
      )                   nowait
  for(i=0; i<4;++i) {
    printf("parallel for %d\n", i);
    k+=i;
  }
{ POMP2_Task_handle pomp2_old_task;
  POMP2_Implicit_barrier_enter( &opari2_region_1, &pomp2_old_task );
#pragma omp barrier
  POMP2_Implicit_barrier_exit( &opari2_region_1, pomp2_old_task ); }
  POMP2_For_exit( &opari2_region_1 );
 }
  POMP2_Parallel_end( &opari2_region_1 ); }
  POMP2_Parallel_join( &opari2_region_1, pomp2_old_task ); }
#line 43 "test5.c"

{
  int pomp2_num_threads = 2;
  int pomp2_if = (int)( k );
  POMP2_Task_handle pomp2_old_task;
  POMP2_Parallel_fork(&opari2_region_2, pomp2_if, pomp2_num_threads, &pomp2_old_task, opari2_ctc_2 );
#line 44 "test5.c"
#pragma omp parallel                                              firstprivate(j) default(shared) copyin(t) reduction(+:l) POMP2_DLIST_00002 firstprivate(pomp2_old_task) if(pomp2_if) num_threads(pomp2_num_threads)
{   POMP2_Parallel_begin( &opari2_region_2 );
{   POMP2_Sections_enter( &opari2_region_2, opari2_ctc_2  );
#line 44 "test5.c"
#pragma omp          sections                      lastprivate(i)                                                                            nowait
  {
#line 46 "test5.c"
    #pragma omp section
{   POMP2_Section_begin( &opari2_region_2, opari2_ctc_2  );
#line 47 "test5.c"
    {
      printf("Section 1\n");
    }
  POMP2_Section_end( &opari2_region_2 ); }
#line 50 "test5.c"
    #pragma omp section
{   POMP2_Section_begin( &opari2_region_2, opari2_ctc_2  );
#line 51 "test5.c"
    {
      printf("Section 2\n");
    }
  POMP2_Section_end( &opari2_region_2 ); }
#line 54 "test5.c"
    #pragma omp section
{   POMP2_Section_begin( &opari2_region_2, opari2_ctc_2  );
#line 55 "test5.c"
    {
      printf("Section 3\n");
    }
  POMP2_Section_end( &opari2_region_2 ); }
#line 58 "test5.c"
  }
{ POMP2_Task_handle pomp2_old_task;
  POMP2_Implicit_barrier_enter( &opari2_region_2, &pomp2_old_task );
#pragma omp barrier
  POMP2_Implicit_barrier_exit( &opari2_region_2, pomp2_old_task ); }
  POMP2_Sections_exit( &opari2_region_2 );
 }
  POMP2_Parallel_end( &opari2_region_2 ); }
  POMP2_Parallel_join( &opari2_region_2, pomp2_old_task ); }
#line 59 "test5.c"
}
