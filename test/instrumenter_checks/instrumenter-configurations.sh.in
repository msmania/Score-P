#!/bin/sh

## -*- mode: sh -*-

## @configure_input@

##
## This file is part of the Score-P software (http://www.score-p.org)
##
## Copyright (c) 2009-2011,
## RWTH Aachen University, Germany
##
## Copyright (c) 2009-2011,
## Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
##
## Copyright (c) 2009-2011, 2014, 2019, 2021,
## Technische Universitaet Dresden, Germany
##
## Copyright (c) 2009-2011,
## University of Oregon, Eugene, USA
##
## Copyright (c) 2009-2016, 2020, 2022,
## Forschungszentrum Juelich GmbH, Germany
##
## Copyright (c) 2009-2011,
## German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
##
## Copyright (c) 2009-2011,
## Technische Universitaet Muenchen, Germany
##
## This software may be modified and distributed under the terms of
## a BSD-style license.  See the COPYING file in the package base
## directory for details.
##

## file       test/instrumenter_checks/instrumenter-configurations.sh.in

comp_arg=""
pomp_user_arg=""
pdt_arg=""
omp_i_arg=""
omp_b_arg=""
mpp_arg=""

file_prefix="../installcheck/instrumenter_checks/configurations_"

# nompi: meaning unclear. we might implement is as "without mpi
# wrapping except for init/finalize". Still it makes no sense for
# non-mpi sources.

# noopenmp: if we model it like nompi, then we need to intercept just
# the fork/join/thread_begin/thread_end. Everything else gets ignored.

# pomp_user_arg: use HAVE_OPARI2_TRUE when it is implemented

omp_instrumenter_args=
@HAVE_OPENMP_C_SUPPORT_TRUE@omp_instrumenter_args="openmp noopenmp "

omp_backend_args=
@HAVE_OPENMP_C_SUPPORT_TRUE@@HAVE_SCOREP_OMPT_SUPPORT_FALSE@omp_backend_args="${omp_backend_args} thread=omp "
@HAVE_OPENMP_C_SUPPORT_TRUE@@HAVE_SCOREP_OMPT_SUPPORT_TRUE@omp_backend_args="${omp_backend_args} thread=omp:ompt thread=omp:opari2 "

cd @abs_top_builddir@

paradigm_list="serial"
@HAVE_OPENMP_C_SUPPORT_TRUE@paradigm_list="${paradigm_list} omp"
@HAVE_MPI_SUPPORT_TRUE@paradigm_list="${paradigm_list} mpi"
@HAVE_OPENMP_C_SUPPORT_TRUE@@HAVE_MPI_SUPPORT_TRUE@paradigm_list="${paradigm_list} mpi_omp"
@HAVE_SHMEM_SUPPORT_TRUE@paradigm_list="${paradigm_list} shmem"
@HAVE_SHMEM_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@paradigm_list="${paradigm_list} shmem_omp"
@HAVE_CUDA_SUPPORT_TRUE@paradigm_list="${paradigm_list} cuda"

# remove files from previous invocation. clean all possible.
for paradigm in serial omp mpi mpi_omp shmem shmem_omp cuda hip; do
    rm -f ${file_prefix}${paradigm}
done
# set defaults for supported paradigms
for paradigm in ${paradigm_list}; do
    echo default >${file_prefix}${paradigm}
done

# create possible configurations, one file per paradigm
compilerargs="nocompiler"
@HAVE_SCOREP_COMPILER_INSTRUMENTATION_TRUE@compilerargs="compiler nocompiler"
for comp_arg in $compilerargs; do

    for pomp_user_arg in pomp nopomp; do
@HAVE_SCOREP_PDT_FALSE@        for user_arg in user nouser; do
@HAVE_SCOREP_PDT_TRUE@        for pdt_arg in pdt nopdt; do
@HAVE_SCOREP_PDT_TRUE@            if [ $pdt_arg = pdt ]; then
@HAVE_SCOREP_PDT_TRUE@                prepocessargs="nopreprocess"
@HAVE_SCOREP_PDT_TRUE@            else
                prepocessargs="preprocess nopreprocess"
@HAVE_SCOREP_PDT_TRUE@                fi
            for preprocess_user_arg in $prepocessargs; do

                # --- output per paradigm begins --- #

                # serial ----------------------------#
                echo "$user_arg $comp_arg $pomp_user_arg $preprocess_user_arg $pdt_arg" >> ${file_prefix}serial

                # omp -------------------------------#
@HAVE_OPENMP_C_SUPPORT_TRUE@                for omp_i_arg in $omp_instrumenter_args; do
@HAVE_OPENMP_C_SUPPORT_TRUE@                     for omp_b_arg in $omp_backend_args; do
@HAVE_OPENMP_C_SUPPORT_TRUE@                         if test "$omp_i_arg" = "openmp" && test "$omp_b_arg" = "thread=omp:ompt"; then
@HAVE_OPENMP_C_SUPPORT_TRUE@                             continue
@HAVE_OPENMP_C_SUPPORT_TRUE@                         fi
@HAVE_OPENMP_C_SUPPORT_TRUE@                         if test "$pdt_arg" = "pdt" && test "$omp_b_arg" = "thread=omp:ompt"; then
@HAVE_OPENMP_C_SUPPORT_TRUE@                             continue
@HAVE_OPENMP_C_SUPPORT_TRUE@                         fi
@HAVE_OPENMP_C_SUPPORT_TRUE@                         echo "$user_arg $comp_arg $pomp_user_arg $preprocess_user_arg $pdt_arg $omp_i_arg $omp_b_arg " >> ${file_prefix}omp
@HAVE_OPENMP_C_SUPPORT_TRUE@                     done
@HAVE_OPENMP_C_SUPPORT_TRUE@                done

                # mpi -------------------------------#
@HAVE_MPI_SUPPORT_TRUE@                for mpp_arg in "mpp=mpi"; do # add nompi when multilibs are ready, see above comment
@HAVE_MPI_SUPPORT_TRUE@                    echo "$user_arg $comp_arg $pomp_user_arg $preprocess_user_arg $pdt_arg $mpp_arg" >> ${file_prefix}mpi
@HAVE_MPI_SUPPORT_TRUE@                done

                # mpi_omp ---------------------------#
@HAVE_MPI_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                for mpp_arg in "mpp=mpi"; do # add nompi when multilibs are ready, see above comment
@HAVE_MPI_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                    for omp_i_arg in $omp_instrumenter_args; do
@HAVE_MPI_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                         for omp_b_arg in $omp_backend_args; do
@HAVE_MPI_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                             if test "$omp_i_arg" = "openmp" && test "$omp_b_arg" = "thread=omp:ompt"; then
@HAVE_MPI_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                                 continue
@HAVE_MPI_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                             fi
@HAVE_MPI_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                             if test "$pdt_arg" = "pdt" && test "$omp_b_arg" = "thread=omp:ompt"; then
@HAVE_MPI_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                                 continue
@HAVE_MPI_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                             fi
@HAVE_MPI_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                             echo "$user_arg $comp_arg $pomp_user_arg $preprocess_user_arg $pdt_arg $mpp_arg $omp_i_arg $omp_b_arg" >> ${file_prefix}mpi_omp
@HAVE_MPI_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                         done
@HAVE_MPI_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                    done
@HAVE_MPI_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                done

                # shmem -----------------------------#
@HAVE_SHMEM_SUPPORT_TRUE@                for mpp_arg in "mpp=shmem"; do
@HAVE_SHMEM_SUPPORT_TRUE@                    echo "$user_arg $comp_arg $pomp_user_arg $preprocess_user_arg $pdt_arg $mpp_arg" >> ${file_prefix}shmem
@HAVE_SHMEM_SUPPORT_TRUE@                done

                # shmem_omp -------------------------#
@HAVE_SHMEM_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                for mpp_arg in "mpp=shmem"; do
@HAVE_SHMEM_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                    for omp_i_arg in $omp_instrumenter_args; do
@HAVE_SHMEM_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                        for omp_b_arg in $omp_backend_args; do
@HAVE_SHMEM_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                            if test "$omp_i_arg" = "openmp" && test "$omp_b_arg" = "thread=omp:ompt"; then
@HAVE_SHMEM_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                                continue
@HAVE_SHMEM_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                            fi
@HAVE_SHMEM_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                            if test "$pdt_arg" = "pdt" && test "$omp_b_arg" = "thread=omp:ompt"; then
@HAVE_SHMEM_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                                continue
@HAVE_SHMEM_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                            fi
@HAVE_SHMEM_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                            echo "$user_arg $comp_arg $pomp_user_arg $preprocess_user_arg $pdt_arg $mpp_arg $omp_i_arg $omp_b_arg" >> ${file_prefix}shmem_omp
@HAVE_SHMEM_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                        done
@HAVE_SHMEM_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                    done
@HAVE_SHMEM_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@                done

                # cuda ------------------------------#
@HAVE_CUDA_SUPPORT_TRUE@                if [ $preprocess_user_arg = nopreprocess ]; then
@HAVE_CUDA_SUPPORT_TRUE@                    for cuda_arg in cuda nocuda; do
@HAVE_CUDA_SUPPORT_TRUE@                        echo "$user_arg $comp_arg $pomp_user_arg $preprocess_user_arg $pdt_arg $cuda_arg" >> ${file_prefix}cuda
@HAVE_CUDA_SUPPORT_TRUE@                    done
@HAVE_CUDA_SUPPORT_TRUE@                fi

                # hip -------------------------------#
@HAVE_HIP_CHECK_SUPPORT_TRUE@                if [ $preprocess_user_arg = nopreprocess ]; then
@HAVE_HIP_CHECK_SUPPORT_TRUE@                    echo "$user_arg $comp_arg $pomp_user_arg $preprocess_user_arg $pdt_arg hip" >> ${file_prefix}hip
@HAVE_HIP_CHECK_SUPPORT_TRUE@                fi

                # ...  ------------------------------#

                # --- output per paradigm ends --- #

                done
@HAVE_SCOREP_PDT_TRUE@        done
@HAVE_SCOREP_PDT_FALSE@        done
    done
done

# Notify about created files

if test -f "${file_prefix}serial"; then
    echo "  GEN    ${file_prefix}serial"
fi

@HAVE_OPENMP_C_SUPPORT_TRUE@if test -f "${file_prefix}omp"; then
@HAVE_OPENMP_C_SUPPORT_TRUE@    echo "  GEN    ${file_prefix}omp"
@HAVE_OPENMP_C_SUPPORT_TRUE@fi

@HAVE_MPI_SUPPORT_TRUE@if test -f "${file_prefix}mpi"; then
@HAVE_MPI_SUPPORT_TRUE@    echo "  GEN    ${file_prefix}mpi"
@HAVE_MPI_SUPPORT_TRUE@fi

@HAVE_MPI_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@if test -f "${file_prefix}mpi_omp"; then
@HAVE_MPI_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@    echo "  GEN    ${file_prefix}mpi_omp"
@HAVE_MPI_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@fi

@HAVE_SHMEM_SUPPORT_TRUE@if test -f "${file_prefix}shmem"; then
@HAVE_SHMEM_SUPPORT_TRUE@    echo "  GEN    ${file_prefix}shmem"
@HAVE_SHMEM_SUPPORT_TRUE@fi

@HAVE_SHMEM_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@if test -f "${file_prefix}shmem_omp"; then
@HAVE_SHMEM_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@    echo "  GEN    ${file_prefix}shmem_omp"
@HAVE_SHMEM_SUPPORT_TRUE@@HAVE_OPENMP_C_SUPPORT_TRUE@fi

@HAVE_CUDA_SUPPORT_TRUE@if test -f "${file_prefix}cuda"; then
@HAVE_CUDA_SUPPORT_TRUE@    echo "  GEN    ${file_prefix}cuda"
@HAVE_CUDA_SUPPORT_TRUE@fi

@HAVE_HIP_CHECK_SUPPORT_TRUE@if test -f "${file_prefix}hip"; then
@HAVE_HIP_CHECK_SUPPORT_TRUE@    echo "  GEN    ${file_prefix}hip"
@HAVE_HIP_CHECK_SUPPORT_TRUE@fi
