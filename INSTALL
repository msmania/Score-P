
                         Score-P INSTALL GUIDE
                         =====================

This file describes how to configure, compile, and install the Score-P
measurement infrastructure.  If you are not familiar with using the
configure scripts generated by GNU autoconf, read the "Generic
Installation Instructions" section below; then return here.  Also,
make sure to carefully read and follow the platform-specific
installation notes (especially when building for the Intel Xeon Phi
platform).


Quick start
===========

In a nutshell, configuring, building, and installing Score-P can be as
simple as executing the shell commands

    mkdir _build
    cd _build
    ../configure --prefix=<installdir>
    make
    make install

If you don't specify --prefix, /opt/scorep will be used.

Depending on your system configuration and specific needs, the build
process can be customized as described below.


Configuration
=============

The configure script in this package tries to automatically determine
the platform for which Score-P will be compiled in order to provide
reasonable defaults for backend (i.e., compute node) compilers,
MPI compilers, and, in case of cross-compiling environments, frontend
(i.e., login node) compilers.

Depending on the environment it is possible to override the platform
defaults by using the following configure options:

  --with-machine-name=<default machine name>
               The default machine name used in profile and trace
               output. We suggest using a unique name, e.g., the
               fully qualified domain name. If not set, a name
               based on the detected platform is used. Can be
               overridden at measurement time by setting the
               environment variable SCOREP_MACHINE_NAME.

Score-P requires a full compiler suite with language support for C99,
C++11 and optionally Fortran 77 and Fortran 90. The following section
describes how to select supported compiler suits.

In non-cross-compiling environments, the compiler suite used to build
the backend parts can be specified explicitly if desired. On Linux
clusters it is currently recommended to use this option to select a
compiler suite other than GCC.

  --with-nocross-compiler-suite=(gcc|ibm|intel|oneapi|nvhpc|pgi|clang| \
                                 aocc|amdclang|cray)
               The compiler suite used to build this package in
               non-cross-compiling environments. Needs to be in $PATH.
               [Default: gcc]

  Note: if you select 'pgi', CXX will be set to 'pgc++', which is
  PGI's default C++ compiler. If you have a PGI compiler installation
  prior to 16.1, you might want to use 'pgCC' instead if your MPI and
  SHMEM compiler wrappers use this one. To select pgCC, please add
  'CXX=pgCC' to your configure line.

  Note that selecting 'cray' results in using the Cray compiler wrappers
  cc, CC, ftn for compiling code, independently of the selected PrgEnv.

In cross-compiling environments, the compiler suite used to build the
frontend parts can be specified explicitly if desired.

  --with-frontend-compiler-suite=(gcc|ibm|intel|oneapi|nvhpc|pgi|clang| \
                                  aocc|amdclang|cray)
               The compiler suite used to build the frontend parts of
               this package in cross-compiling environments.  Needs to
               be in $PATH.
               [Default: gcc]

  Note that selecting 'cray' results in using the Cray compiler wrappers
  cc, CC, ftn for compiling code, independently of the selected PrgEnv.

The MPI compiler, if in $PATH, is usually autodetected. Users should
normally not need to specify which compiler will be invoked by the MPI
compiler wrapper; Score-P handles this automatically using the
appropriate command line arguments for the correct version of
MPI. While many MPI distributions also allow selecting the compiler
that the wrapper will invoke via environment variables, this mechanism
should not be used with Score-P.

Note that this also applies to instrumentation time. Here, users
should use the command line arguments along with the Score-P wrappers
for the MPI compiler wrappers: scorep-mpicc -cc=/path/to/specific/compiler ...

If there are several MPI compilers in $PATH the user should
select one using the configure option:

  --with-mpi=(bullxmpi|cray|hp|ibmpoe|intel|intel2|intel3|intelpoe|lam| \
              mpibull2|mpich|mpich2|mpich3|mpich4|openmpi|openmpi3| \
              platform|scali|sgimpt|sgimptwrapper|spectrum|sun)
               The MPI compiler suite to build this package in non
               cross-compiling mode. Usually autodetected. Needs to be
               in $PATH.

  Note that there is currently no consistency check if backend and MPI
  compiler are from the same vendor. If they are not, linking problems
  (undefined references) might occur.

  Note that selecting 'cray' results in using the Cray compiler wrappers
  cc, CC, ftn for compiling MPI code, independently of the selected PrgEnv.

The SHMEM compiler, if in $PATH, is usually autodetected. If there are
several SHMEM compilers in $PATH the user is requested to select one
using the configure option:

  --with-shmem=(cray|openshmem|openmpi|openmpi3|sgimpt|sgimptwrapper|spectrum)
               The SHMEM compiler suite to build this package in
               non cross-compiling mode. Usually autodetected.
               Needs to be in $PATH.

  Note that selecting 'cray' results in using the Cray compiler wrappers
  cc, CC, ftn for compiling SHMEM code, independently of the selected PrgEnv.

If a particular system requires to use compilers different to those
Score-P currently supports, please edit the three files
build-config/common/platforms/platform-*-user-provided to your
needs and use the following configure option:

  --with-custom-compilers
               Customize compiler settings by 1. copying the three
               files
               <srcdir>/build-config/common/platforms/platform-*-user-provided
               to the directory where you run configure <builddir>,
               2. editing those files to your needs, and 3. running
               configure. Alternatively, edit the files under <srcdir>
               directly. Files in <builddir> take precedence. You are
               entering unsupported terrain.  Namaste, and good luck!

On cross-compile systems the default frontend compiler is IBM XL for
the Blue Gene series and GCC on all other platforms.  The backend
compilers will either be automatically selected by the platform
detection (IBM Blue Gene series) or by the currently loaded
environment modules (Cray X series). If you want to customize these
settings please use the configure option '--with-custom-compilers' as
described above.

Although this package comes with recent versions of the OTF2 and Cube
libraries as well as the OPARI2 instrumenter included, it is possible
to use existing installations instead. Here, the --without option
means 'without external installation', i.e., the component provided
with the tarball will be used:

  --with-otf2[=<otf2-bindir>]
               Use an already installed and compatible OTF2 library
               (v3.0 or newer). Provide path to otf2-config.
               Auto-detected if already in $PATH.
  --with-cubew[=<cubew-bindir>]
               Use an already installed and compatible cubew
               library (v4.8 or newer). Provide path to cubew-config.
               Auto-detected if already in $PATH.
  --with-cubelib[=<cubelib-bindir>]
               Use an already installed and compatible cubelib
               library (v4.8 or newer). Provide path to cubelib-config.
               Auto-detected if already in $PATH.
  --with-opari2[=<opari2-bindir>]
               Use an already installed and compatible OPARI2 (v2.0
               or newer). Provide path to opari2-config.
               Auto-detected if already in $PATH.

For the components otf2, cubew, cubelib, and opari2, the corresponding
--without-<component> or --with-<component>=no options will ignore the
<component>-config in $PATH but use the Score-P internal components.

To enable support for CUDA measurement via the CUPTI interface we
provide three configure options: the path to the CUDA runtime, the
path to the CUPTI library, and the path to the CUDA library. Usually
you just need to provide the path to the runtime via --with-libcudart;
CUPTI will be detected automatically in the extras/CUPTI subdirectory
and the system libcuda will be used. This usually works for GNU and
Intel compilers:

  --with-libcudart=<Path to libcudart installation>
               If you want to build scorep with libcudart but do not
               have a libcudart in a standard location then you need
               to explicitly specify the directory where it is
               installed. On non-cross-compile systems we search the
               system include and lib paths per default [yes], on
               cross-compile systems however,you have to specify a
               path [no]. --with-libcudart is a shorthand for
               --with-libcudart-include=<Path/include> and
               --with-libcudart-lib=<Path/lib>. If these shorthand
               assumptions are not correct, you can use the explicit
               include and lib options directly.
  --with-libcudart-include=<Path to libcudart headers: cuda.h cuda_runtime_api.h>
  --with-libcudart-lib=<Path to libcudart libraries>

For PGI compilers since version 16.10 you need at least two options,
--with-libcudart pointing to the <PGI CUDA runtime> and
--with-libcupti pointing to <NVIDIA CUDA runtime>/extras/CUPTI. Note
that CUDA/CUPTI support in Score-P with PGI compilers prior to 16.10
does not work (unless you modify the NVIDIA CUDA runtime headers).

  --with-libcupti=(yes|no|<Path to libcupti installation>)
               If you want to build with libcupti support but do
               not have a libcupti in a standard location, you need
               to explicitly specify the directory where it is
               installed. On non-cross-compile systems we search
               the system include and lib paths per default [yes];
               on cross-compile systems, however, you have to
               specify a path [no]. --with-libcupti is a shorthand
               for --with-libcupti-include=<Path/include> and
               --with-libcupti-lib=<Path/lib>. If these shorthand
               assumptions are not correct, you can use the
               explicit include and lib options directly.
  --with-libcupti-include=<Path to libcupti headers: cupti.h>
  --with-libcupti-lib=<Path to libcupti libraries>

If you want to use a CUDA library different from the system one you
need to specify its location via:

  --with-libcuda=<Path to libcuda installation>
               Usually not needed, specifying --with-libcudart should
               be fine!
               If you want to build scorep with libcuda but do not
               have a libcuda in a standard location then you need to
               explicitly specify the directory where it is
               installed. On non-cross-compile systems we search the
               system include and lib paths per default [yes], on
               cross-compile systems however,you have to specify a
               path [no]. --with-libcuda is a shorthand for
               --with-libcuda-include=<Path/include> and
               --with-libcuda-lib=<Path/lib>. If these shorthand
               assumptions are not correct, you can use the explicit
               include and lib options directly.
  --with-libcuda-include=<Path to libcuda headers>
  --with-libcuda-lib=<Path to libcuda libraries>

If libnvidia-ml, which is used to determine correct device-IDs in a
multi-GPU/multi-process environment, isn't detected automatically, you
can specify its location via:

  --with-libnvidia-ml=(yes|no|<Path to libnvidia-ml installation>)
               If you want to build with libnvidia-ml support but
               do not have a libnvidia-ml in a standard location,
               you need to explicitly specify the directory where
               it is installed. On non-cross-compile systems we
               search the system include and lib paths per default
               [yes]; on cross-compile systems, however, you have
               to specify a path [no]. --with-libnvidia-ml is a
               shorthand for
               --with-libnvidia-ml-include=<Path/include> and
               --with-libnvidia-ml-lib=<Path/lib>. If these
               shorthand assumptions are not correct, you can use
               the explicit include and lib options directly.
  --with-libnvidia-ml-include=<Path to libnvidia-ml headers: nvml.h>
  --with-libnvidia-ml-lib=<Path to libnvidia-ml libraries>

To enable support for HIP measurement via ROCm configure with
--with-rocm=<path-to-ROCm-installation>. If an argument is missing the value
from $ROCM_PATH is used.

  --with-rocm=<path-to-ROCm-installation>
               Location of the ROCm installation (e.g., /opt/rocm)

If your installation differs from the default layout, you can provide paths via
the following configure arguments:

  --with-libamdhip64=(yes|no|<Path to libamdhip64 installation>)
               If you want to build with libamdhip64 support but do
               not have a libamdhip64 in a standard location, you
               need to explicitly specify the directory where it is
               installed. On non-cross-compile systems we search
               the system include and lib paths per default [yes];
               on cross-compile systems, however, you have to
               specify a path [no]. --with-libamdhip64 is a
               shorthand for
               --with-libamdhip64-include=<Path/include> and
               --with-libamdhip64-lib=<Path/lib>. If these
               shorthand assumptions are not correct, you can use
               the explicit include and lib options directly.
  --with-libamdhip64-include=<Path to libamdhip64 headers: hip/hip_runtime.h>
  --with-libamdhip64-lib=<Path to libamdhip64 libraries>
  --with-libroctracer64=(yes|no|<Path to libroctracer64 installation>)
               If you want to build with libroctracer64 support but
               do not have a libroctracer64 in a standard location,
               you need to explicitly specify the directory where
               it is installed. On non-cross-compile systems we
               search the system include and lib paths per default
               [yes]; on cross-compile systems, however, you have
               to specify a path [no]. --with-libroctracer64 is a
               shorthand for
               --with-libroctracer64-include=<Path/include> and
               --with-libroctracer64-lib=<Path/lib>. If these
               shorthand assumptions are not correct, you can use
               the explicit include and lib options directly.
  --with-libroctracer64-include=<Path to libroctracer64 headers: roctracer_hip.h>
  --with-libroctracer64-lib=<Path to libroctracer64 libraries>
  --with-librocm_smi64=(yes|no|<Path to librocm_smi64 installation>)
               If you want to build with librocm_smi64 support but
               do not have a librocm_smi64 in a standard location,
               you need to explicitly specify the directory where
               it is installed. On non-cross-compile systems we
               search the system include and lib paths per default
               [yes]; on cross-compile systems, however, you have
               to specify a path [no]. --with-librocm_smi64 is a
               shorthand for
               --with-librocm_smi64-include=<Path/include> and
               --with-librocm_smi64-lib=<Path/lib>. If these
               shorthand assumptions are not correct, you can use
               the explicit include and lib options directly.
  --with-librocm_smi64-include=<Path to librocm_smi64 headers: rocm_smi/rocm_smi.h>
  --with-librocm_smi64-lib=<Path to librocm_smi64 libraries>

Options to further specify which features and external packages should
be used to build Score-P are as follows:

  --enable-platform-mic   Force build for Intel Xeon Phi co-processors
                          [no].  This option is only needed for Xeon
                          Phi co-processors, like the Knights Corner
                          (KNC). It is not needed for self-hosted Xeon
                          Phis, like the Knights Landing (KNL); for these
                          chips no special treatment is required.
  --enable-experimental-platform
                          Enables builds on platforms that are not officially
                          supported (currently macOS and MinGW).
  --enable-debug          activate internal debug output [no]
  --enable-shared[=PKGS]  build shared libraries [default=no]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-backend-test-runs
               Enable execution of tests during 'make check' [no]
               (does not affect building of tests, though). If
               disabled, the files 'check-file-*' and/or
               'skipped_tests' listing the tests are generated in the
               corresponding build directory.
  --enable-cuda
               Enable or disable support for CUDA. Fails if support
               cannot be satisfied but was requested.
  --enable-openacc
               Enable or disable support for OpenACC. (defaults to yes)
  --enable-default=<comma-separated list>
               Make experimental feature(s) the default (if established
               alternative exists).
               Valid value: ompt
               List of valid values may change without deprecation
               notice.
  --disable-gcc-plugin
               Disable support for the GCC plug-in
               instrumentation. Default is to determine support
               automatically. This disables it by request and fails
               if support cannot be satisfied but was requested.
  --with-pdt=<path-to-binaries>
               Specifies the path to the program database toolkit
               (PDT) binaries, e.g., cparse.
  --with-sionlib[=<sionlib-bindir>]
               Use an already installed sionlib. Provide path to
               sionconfig. Auto-detected if already in $PATH. This
               option is not used by Score-P itself but passed to an
               internal OTF2.
  --with-papi-header=<path-to-papi.h>
               If papi.h is not installed in the default location,
               specify the dirname where it can be found.
  --with-papi-lib=<path-to-libpapi.*>
               If libpapi.* is not installed in the default location,
               specify the dirname where it can be found.
  --with-libunwind=(yes|no|<Path to libunwind installation>)
               If you want to build with libunwind support but do
               not have a libunwind in a standard location, you
               need to explicitly specify the directory where it is
               installed. On non-cross-compile systems we search
               the system include and lib paths per default [yes];
               on cross-compile systems, however, you have to
               specify a path [no]. --with-libunwind is a shorthand
               for --with-libunwind-include=<Path/include> and
               --with-libunwind-lib=<Path/lib>. If these shorthand
               assumptions are not correct, you can use the
               explicit include and lib options directly.
  --with-libunwind-include=<Path to libunwind headers: libunwind.h>
  --with-libunwind-lib=<Path to libunwind libraries>
  --with-openacc-include=<path-to-openacc.h>
               If openacc.h is not installed in the default
               location, specify the directory where it can be
               found.
  --with-openacc-prof-include=<path-to-acc_prof.h>
               If acc_prof.h is not installed in the default
               location, specify the directory where it can be
               found.
  --with-libOpenCL=(yes|no|<Path to libOpenCL installation>)
               If you want to build with libOpenCL support but do
               not have a libOpenCL in a standard location, you
               need to explicitly specify the directory where it is
               installed. On non-cross-compile systems we search
               the system include and lib paths per default [yes];
               on cross-compile systems, however, you have to
               specify a path [no]. --with-libOpenCL is a shorthand
               for --with-libOpenCL-include=<Path/include> and
               --with-libOpenCL-lib=<Path/lib>. If these shorthand
               assumptions are not correct, you can use the
               explicit include and lib options directly.
  --with-libOpenCL-include=<Path to libOpenCL headers: CL/cl.h OpenCL/opencl.h>
  --with-libOpenCL-lib=<Path to libOpenCL libraries>
  --with-libpmi=(yes|no|<Path to libpmi installation>)
               If you want to build with libpmi support but do not
               have a libpmi in a standard location, you need to
               explicitly specify the directory where it is
               installed. On non-cross-compile systems we search
               the system include and lib paths per default [yes];
               on cross-compile systems, however, you have to
               specify a path [no]. --with-libpmi is a shorthand
               for --with-libpmi-include=<Path/include> and
               --with-libpmi-lib=<Path/lib>. If these shorthand
               assumptions are not correct, you can use the
               explicit include and lib options directly.
  --with-libpmi-include=<Path to libpmi headers: pmi.h>
  --with-libpmi-lib=<Path to libpmi libraries>
  --with-librca=(yes|no|<Path to librca installation>)
               If you want to build with librca support but do not
               have a librca in a standard location, you need to
               explicitly specify the directory where it is
               installed. On non-cross-compile systems we search
               the system include and lib paths per default [yes];
               on cross-compile systems, however, you have to
               specify a path [no]. --with-librca is a shorthand
               for --with-librca-include=<Path/include> and
               --with-librca-lib=<Path/lib>. If these shorthand
               assumptions are not correct, you can use the
               explicit include and lib options directly.
  --with-librca-include=<Path to librca headers>
  --with-librca-lib=<Path to librca libraries>
  --with-liblustreapi[=yes|no|<path to liblustreapi installation>]
               Try to use liblustreapi. Defaults to [yes] on
               non-cross-compile systems and expects library and
               headers to be found in system locations. Defaults to
               [no] on cross-compile systems. Provide
               liblustreapi's installation prefix [path] to
               override the defaults. --with-liblustreapi=<path> is
               a shorthand for
               --with-liblustreapi-include=<path/include> and
               --with-liblustreapi-lib=<path/(lib64|lib)>. If this
               is not the case, use the explicit options directly
               or provide paths via LIBLUSTREAPI_LIB and
               LIBLUSTREAPI_INCLUDE.
  --with-liblustreapi-include=<Path to liblustreapi headers: lustre/lustreapi.h>
  --with-liblustreapi-lib=<Path to liblustreapi libraries>
  --with-libbfd[=yes|download|<path to libbfd installation>]
               A shared or PIC libbfd is required. Option defaults
               to [yes] on non-cross-compile systems and expects
               library and headers to be found in system locations.
               Provide libbfd's installation prefix [path] to
               override this default. --with-libbfd=<path> is a
               shorthand for --with-libbfd-include=<path/include>
               and --with-libbfd-lib=<path/(lib64|lib)>. If this
               not the case, use the explicit options directly or
               provide paths via LIBBFD_LIB and LIBBFD_INCLUDE. Use
               [download] to automatically obtain and use libbfd
               via external tarball.
  --with-libbfd-include=<Path to libbfd headers: bfd.h>
  --with-libbfd-lib=<Path to libbfd libraries>
  Please note that if a Score-P installation uses libbfd, the Score-P
  instrumented binaries may only be distributed under GPLv3 licensing.
  --with-llvm[=<llvm-bindir>]
               Use an already installed LLVM, including libclang as we
               need libclang for library-wrapping. Provide path to
               llvm-config. Auto-detected if already in $PATH.

Instead of passing command-line options to the 'configure' script, the package
configuration can also be influenced by setting the following environment
variables:

  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  LT_SYS_LIBRARY_PATH
              User-defined run-time library search path.
  CPP         C preprocessor
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor
  CCAS        assembler compiler command (defaults to CC)
  CCASFLAGS   assembler compiler flags (defaults to CFLAGS)
  CXXCPP      C++ preprocessor
  F77         Fortran 77 compiler command
  FFLAGS      Fortran 77 compiler flags
  FC          Fortran compiler command
  FCFLAGS     Fortran compiler flags
  CC_FOR_BUILD
              C compiler command for the frontend build
  CXX_FOR_BUILD
              C++ compiler command for the frontend build
  F77_FOR_BUILD
              Fortran 77 compiler command for the frontend build
  FC_FOR_BUILD
              Fortran compiler command for the frontend build
  CPPFLAGS_FOR_BUILD
              (Objective) C/C++ preprocessor flags for the frontend build,
              e.g. -I<include dir> if you have headers in a nonstandard
              directory <include dir>
  CFLAGS_FOR_BUILD
              C compiler flags for the frontend build
  CXXFLAGS_FOR_BUILD
              C++ compiler flags for the frontend build
  FFLAGS_FOR_BUILD
              Fortran 77 compiler flags for the frontend build
  FCFLAGS_FOR_BUILD
              Fortran compiler flags for the frontend build
  LDFLAGS_FOR_BUILD
              linker flags for the frontend build, e.g. -L<lib dir> if you
              have libraries in a nonstandard directory <lib dir>
  LIBS_FOR_BUILD
              libraries to pass to the linker for the frontend build, e.g.
              -l<library>
  CC_FOR_BUILD_LIBWRAP
              C compiler used for building library wrapper generator. Defaults
              to CC from llvm-config or gcc.
  CXX_FOR_BUILD_LIBWRAP
              C++ compiler used for building library wrapper generator.
              Defaults to CXX from llvm-config or g++.
  CPPFLAGS_FOR_BUILD_LIBWRAP
              C preprocesser flags for building library wrapper generator.
              Will be amended with 'llvm-config --cppflags'.
  CFLAGS_FOR_BUILD_LIBWRAP
              C compiler flags for building library wrapper generator.
  CXXFLAGS_FOR_BUILD_LIBWRAP
              C++ compiler flags for building library wrapper generator.
  LDFLAGS_FOR_BUILD_LIBWRAP
              Linker flags for building library wrapper generator.
  LIBS_FOR_BUILD_LIBWRAP
              Libraries for building library wrapper generator. Will be
              amended with '-lclang'.
  MPICC       MPI C compiler command
  MPICXX      MPI C++ compiler command
  MPIF77      MPI Fortran 77 compiler command
  MPIFC       MPI Fortran compiler command
  MPI_CPPFLAGS
              MPI (Objective) C/C++ preprocessor flags, e.g. -I<include dir>
              if you have headers in a nonstandard directory <include dir>
  MPI_CFLAGS  MPI C compiler flags
  MPI_CXXFLAGS
              MPI C++ compiler flags
  MPI_FFLAGS  MPI Fortran 77 compiler flags
  MPI_FCFLAGS MPI Fortran compiler flags
  MPI_LDFLAGS
              MPI linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  MPI_LIBS    MPI libraries to pass to the linker, e.g. -l<library>
  SHMEMCC     SHMEM C compiler command
  SHMEMCXX    SHMEM C++ compiler command
  SHMEMF77    SHMEM Fortran 77 compiler command
  SHMEMFC     SHMEM Fortran compiler command
  SHMEM_CPPFLAGS
              SHMEM (Objective) C/C++ preprocessor flags, e.g. -I<include dir>
              if you have headers in a nonstandard directory <include dir>
  SHMEM_CFLAGS
              SHMEM C compiler flags
  SHMEM_CXXFLAGS
              SHMEM C++ compiler flags
  SHMEM_FFLAGS
              SHMEM Fortran 77 compiler flags
  SHMEM_FCFLAGS
              SHMEM Fortran compiler flags
  SHMEM_LDFLAGS
              SHMEM linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  SHMEM_LIBS  SHMEM libraries to pass to the linker, e.g. -l<library>
  SHMEM_LIB_NAME
              name of the SHMEM library
  SHMEM_NAME  name of the implemented SHMEM specification
  CFLAGS_FOR_BUILD_SCORE
              C compiler flags for building scorep-score. Please note
              that CC comes from cubelib.
  CXXFLAGS_FOR_BUILD_SCORE
              C++ compiler flags for building scorep-score. Please
              note that CXX comes from cubelib.
  LDFLAGS_FOR_BUILD_SCORE
              Linker flags for building scorep-score.
  PTHREAD_CFLAGS
              CFLAGS used to compile Pthread programs
  PTHREAD_LIBS
              LIBS used to link Pthread programs
  RUNTIME_MANAGEMENT_TIMINGS
              Whether to activate time measurements for Score-P's
              SCOREP_InitMeasurement() and scorep_finalize() functions.
              Activation values are '1', 'yes', and 'true'. For developer use.
  PAPI_INC    Include path to the papi.h header.
  PAPI_LIB    Library path to the papi library.
  LIBUNWIND_INCLUDE
              Path to libunwind headers: libunwind.h
  LIBUNWIND_LIB
              Path to libunwind libraries.
  LIBCUDART_INCLUDE
              Path to libcudart headers: cuda.h cuda_runtime_api.h
  LIBCUDART_LIB
              Path to libcudart libraries.
  LIBCUDA_LIB Path to libcuda libraries.
  LIBCUPTI_INCLUDE
              Path to libcupti headers: cupti.h
  LIBCUPTI_LIB
              Path to libcupti libraries.
  LIBNVIDIA_ML_INCLUDE
              Path to libnvidia-ml headers: nvml.h
  LIBNVIDIA_ML_LIB
              Path to libnvidia-ml libraries.
  LIBOPENCL_INCLUDE
              Path to libOpenCL headers: CL/cl.h OpenCL/opencl.h
  LIBOPENCL_LIB
              Path to libOpenCL libraries.
  LIBLUSTREAPI_INCLUDE
              Path to liblustreapi headers: lustre/lustreapi.h
  LIBLUSTREAPI_LIB
              Path to liblustreapi libraries.
  LIBBFD_INCLUDE
              Path to libbfd headers: bfd.h. Superseded by --with-libbfd
              variants.
  LIBBFD_LIB  Path to libbfd libraries. Superseded by --with-libbfd variants.
  OPENACC_INCLUDE
              Path to openacc.h header.
  OPENACC_PROFILING_INCLUDE
              Path to acc_prof.h header.
  ROCM_PATH   Base directory of the AMD ROCm installation
  LIBAMDHIP64_INCLUDE
              Path to libamdhip64 headers: hip/hip_runtime.h
  LIBAMDHIP64_LIB
              Path to libamdhip64 libraries.
  LIBROCTRACER64_INCLUDE
              Path to libroctracer64 headers: roctracer_hip.h
  LIBROCTRACER64_LIB
              Path to libroctracer64 libraries.
  LIBROCM_SMI64_INCLUDE
              Path to librocm_smi64 headers: rocm_smi/rocm_smi.h
  LIBROCM_SMI64_LIB
              Path to librocm_smi64 libraries.
  LIBPMI_INCLUDE
              Path to libpmi headers: pmi.h
  LIBPMI_LIB  Path to libpmi libraries.
  LIBRCA_LIB  Path to librca libraries.
  BACKEND_TEST_RUNS_NON_RECURSIVE
              Whether to prevent passing --enable-backend-test-runs to
              sub-packages. Activation values are '1', 'yes', and 'true'.

Building & Installing
=====================

Before building Score-P, carefully check whether the configuration summary
printed by the configure script matches your expectations (i.e., whether MPI
and/or OpenMP support is correctly enabled/disabled, external libraries are
used, etc). If everything is OK, Score-P can be built and installed using

        make
        make install

Note that parallel builds (i.e., using 'make -j <n>') are fully supported.



                      Platform-specific Instructions
                      ==============================

GNU Compiler Plug-In
====================

   On some system the necessary header files, for compiling with support for
the GNU Compiler plug-in instrumentation, are not installed by default. Therefore
an extra package needs to be installed.

On Debian and it's derivatives the package is called:

     gcc-<version>-plugin-dev

On Fedora and it's derivatives the package is called:

     gcc-plugin-devel

Intel Xeon Phi (aka. MIC) co-processors
=======================================

   [Note: The following instructions only apply to Intel Xeon Phi
 co-processors, like the Knights Corner (KNC). They do not apply to
 self-hosted Xeon Phis, like the Knights Landing (KNL); for these
 chips no special treatment is required.]

   Building Score-P for Intel Xeon Phi co-processors requires some
extra care, and in some cases two installations into the same
location.  Therefore, we strongly recommend to strictly follow the
procedure as described below.

  1. Ensure that Intel compilers and Intel MPI (if desired) are
     installed and available in $PATH, and that the Intel Manycore
     Platform Software Stack (MPSS) is installed.

  2. Configure Score-P to use the MIC platform:

       mkdir _build-mic
       cd _build-mic
       ../configure --enable-platform-mic [other options, e.g., '--prefix']

  3. Build and install:

       make; make install

   In case a native MIC-only installation serves your needs, that's
it.  However, if the installation should also support instrumentation
and measurement of host code, a second installation *on top* of the
just installed one is required:

  4. Create a new build directory for the host build:

       cd ..
       mkdir _build-host
       cd _build-host

  5. Reconfigure for the host using *identical directory options* (e.g.,
     '--prefix' or '--bindir') as in step 2:

       ../configure [other options as used in step 2]

     This will automatically detect the already existing native MIC
     build and enable the required support in the host tools.  On
     non-cross-compile systems (e.g., typical Linux clusters), make
     sure to explicitly select Intel compiler support by passing
     '--with-nocross-compiler-suite=intel' to the configure script.

  6. Build and install:

       make; make install

   Note that this approach also works with VPATH builds (even with two
separate build directories) as long as the same options defining directory
locations are passed in steps 2 and 5.

User Library Wrapping
=====================

   To enable the user library wrapping feature, Score-P needs the LLVM compiler
infrastructure. For one the 'llvm-config' program is needed, and also `libclang`
and it's developer packages. The clang/clang++ compilers are not strictly
needed, but will be used when available.

On Debian and it's derivatives the packages are called:

     llvm-dev
     libclang-dev

On Fedora and it's derivatives the packages are called:

     llvm-devel
     clang-devel

Or the pre-built packages at:

     http://llvm.org/releases/download.html

                     Generic Installation Instructions
                     =================================

Copyright (C) 1994, 1995, 1996, 1999, 2000, 2001, 2002, 2004, 2005,
2006, 2007, 2008, 2009 Free Software Foundation, Inc.

   Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.  This file is offered as-is,
without warranty of any kind.

Basic Installation
==================

   Briefly, the shell commands `./configure; make; make install' should
configure, build, and install this package.  The following more-detailed
instructions are generic; see the section above for instructions
specific to this package.  Some packages provide this `INSTALL' file but
do not implement all of the features documented below.  The lack of an
optional feature in a given package is not necessarily a bug.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, and a
file `config.log' containing compiler output (useful mainly for
debugging `configure').

   It can also use an optional file (typically called `config.cache'
and enabled with `--cache-file=config.cache' or simply `-C') that saves
the results of its tests to speed up reconfiguring.  Caching is
disabled by default to prevent problems with accidental use of stale
cache files.

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to support@score-p.org so they can be considered
for the next release.  If you are using the cache, and at some point
`config.cache' contains results you don't want to keep, you may remove
or edit it.

   The file `configure.ac' (or `configure.in') is used to create
`configure' by a program called `autoconf'.  You need `configure.ac' if
you want to change it or regenerate `configure' using a newer version
of `autoconf'.

   The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.

     Running `configure' might take a while.  While running, it prints
     some messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package, generally using the just-built uninstalled binaries.

  4. Type `make install' to install the programs and any data files and
     documentation.  When installing into a prefix owned by root, it is
     recommended that the package be configured and built as a regular
     user, and only the `make install' phase executed with root
     privileges.

  5. Optionally, type `make installcheck' to repeat any self-tests, but
     this time using the binaries in their final installed location.
     This target does not install anything.  Running this target as a
     regular user, particularly if the prior `make install' required
     root privileges, verifies that the installation completed
     correctly.

  6. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

  7. Often, you can also type `make uninstall' to remove the installed
     files again.  In practice, not all packages have tested that
     uninstallation works correctly, even though it is required by the
     GNU Coding Standards.

  8. Some packages, particularly those that use Automake, provide `make
     distcheck', which can by used by developers to test that all other
     targets like `make install' and `make uninstall' work correctly.
     This target is generally not run by end users.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  Run `./configure --help'
for details on some of the pertinent environment variables.

   You can give `configure' initial values for configuration parameters
by setting variables in the command line or in the environment.  Here
is an example:

     ./configure CC=c99 CFLAGS=-g LIBS=-lposix

   *Note Defining Variables::, for more details.

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you can use GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.  This
is known as a "VPATH" build.

   With a non-GNU `make', it is safer to compile the package for one
architecture at a time in the source code directory.  After you have
installed the package for one architecture, use `make distclean' before
reconfiguring for another architecture.

   On MacOS X 10.5 and later systems, you can create libraries and
executables that work on multiple system types--known as "fat" or
"universal" binaries--by specifying multiple `-arch' options to the
compiler but only a single `-arch' option to the preprocessor.  Like
this:

     ./configure CC="gcc -arch i386 -arch x86_64 -arch ppc -arch ppc64" \
                 CXX="g++ -arch i386 -arch x86_64 -arch ppc -arch ppc64" \
                 CPP="gcc -E" CXXCPP="g++ -E"

   This is not guaranteed to produce working output in all cases, you
may have to build one architecture at a time and combine the results
using the `lipo' tool if you have problems.

Installation Names
==================

   By default, `make install' installs the package's commands under
`/usr/local/bin', include files under `/usr/local/include', etc.  You
can specify an installation prefix other than `/usr/local' by giving
`configure' the option `--prefix=PREFIX', where PREFIX must be an
absolute file name.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
pass the option `--exec-prefix=PREFIX' to `configure', the package uses
PREFIX as the prefix for installing programs and libraries.
Documentation and other data files still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=DIR' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.  In general, the
default for these options is expressed in terms of `${prefix}', so that
specifying just `--prefix' will affect all of the other directory
specifications that were not explicitly provided.

   The most portable way to affect installation locations is to pass the
correct locations to `configure'; however, many packages provide one or
both of the following shortcuts of passing variable assignments to the
`make install' command line to change installation locations without
having to reconfigure or recompile.

   The first method involves providing an override variable for each
affected directory.  For example, `make install
prefix=/alternate/directory' will choose an alternate location for all
directory configuration variables that were expressed in terms of
`${prefix}'.  Any directories that were specified during `configure',
but not in terms of `${prefix}', must each be overridden at install
time for the entire installation to be relocated.  The approach of
makefile variable overrides for each directory variable is required by
the GNU Coding Standards, and ideally causes no recompilation.
However, some platforms have known limitations with the semantics of
shared libraries that end up requiring recompilation when using this
method, particularly noticeable in packages that use GNU Libtool.

   The second method involves providing the `DESTDIR' variable.  For
example, `make install DESTDIR=/alternate/directory' will prepend
`/alternate/directory' before all installation names.  The approach of
`DESTDIR' overrides is not required by the GNU Coding Standards, and
does not work on platforms that have drive letters.  On the other hand,
it does better at avoiding recompilation issues, and works well even
when some directory options were not specified in terms of `${prefix}'
at `configure' time.

Optional Features
=================

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

   Some packages offer the ability to configure how verbose the
execution of `make' will be.  For these packages, running `./configure
--enable-silent-rules' sets the default to minimal output, which can be
overridden with `make V=1'; while running `./configure
--disable-silent-rules' sets the default to verbose, which can be
overridden with `make V=0'.

Particular systems
==================

   On HP-UX, the default C compiler is not ANSI C compatible.  If GNU
CC is not installed, it is recommended to use the following options in
order to use an ANSI C compiler:

     ./configure CC="cc -Ae -D_XOPEN_SOURCE=500"

and if that doesn't work, install pre-built binaries of GCC for HP-UX.

   On OSF/1 a.k.a. Tru64, some versions of the default C compiler cannot
parse its `<wchar.h>' header file.  The option `-nodtk' can be used as
a workaround.  If GNU CC is not installed, it is therefore recommended
to try

     ./configure CC="cc"

and if that doesn't work, try

     ./configure CC="cc -nodtk"

   On Solaris, don't put `/usr/ucb' early in your `PATH'.  This
directory contains several dysfunctional programs; working variants of
these programs are available in `/usr/bin'.  So, if you need `/usr/ucb'
in your `PATH', put it _after_ `/usr/bin'.

   On Haiku, software installed for all users goes in `/boot/common',
not `/usr/local'.  It is recommended to use the following options:

     ./configure --prefix=/boot/common

Specifying the System Type
==========================

   There may be some features `configure' cannot figure out
automatically, but needs to determine by the type of machine the package
will run on.  Usually, assuming the package is built to be run on the
_same_ architectures, `configure' can figure that out, but if it prints
a message saying it cannot guess the machine type, give it the
`--build=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name which has the form:

     CPU-COMPANY-SYSTEM

where SYSTEM can have one of these forms:

     OS
     KERNEL-OS

   See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the machine type.

   If you are _building_ compiler tools for cross-compiling, you should
use the option `--target=TYPE' to select the type of system they will
produce code for.

   If you want to _use_ a cross compiler, that generates code for a
platform different from the build platform, you should specify the
"host" platform (i.e., that on which the generated programs will
eventually be run) with `--host=TYPE'.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Defining Variables
==================

   Variables not defined in a site shell script can be set in the
environment passed to `configure'.  However, some packages may run
configure again during the build, and the customized values of these
variables may be lost.  In order to avoid this problem, you should set
them in the `configure' command line, using `VAR=value'.  For example:

     ./configure CC=/usr/local2/bin/gcc

causes the specified `gcc' to be used as the C compiler (unless it is
overridden in the site shell script).

Unfortunately, this technique does not work for `CONFIG_SHELL' due to
an Autoconf bug.  Until the bug is fixed you can use this workaround:

     CONFIG_SHELL=/bin/bash /bin/bash ./configure CONFIG_SHELL=/bin/bash

`configure' Invocation
======================

   `configure' recognizes the following options to control how it
operates.

`--help'
`-h'
     Print a summary of all of the options to `configure', and exit.

`--help=short'
`--help=recursive'
     Print a summary of the options unique to this package's
     `configure', and exit.  The `short' variant lists options used
     only in the top level, while the `recursive' variant lists options
     also present in any nested packages.

`--version'
`-V'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`--cache-file=FILE'
     Enable the cache: use and save the results of the tests in FILE,
     traditionally `config.cache'.  FILE defaults to `/dev/null' to
     disable caching.

`--config-cache'
`-C'
     Alias for `--cache-file=config.cache'.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--prefix=DIR'
     Use DIR as the installation prefix.  *note Installation Names::
     for more details, including other options available for fine-tuning
     the installation locations.

`--no-create'
`-n'
     Run the configure checks, but stop before creating any output
     files.

`configure' also accepts some other, not widely useful, options.  Run
`configure --help' for more details.
